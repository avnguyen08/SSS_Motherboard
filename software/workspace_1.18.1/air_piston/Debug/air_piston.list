
air_piston.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004138  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004310  08004310  00005310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004320  08004320  0000601c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004320  08004320  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00005320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004324  08004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004328  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000001c  08004344  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08004344  000060bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5e4  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9c  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  000120d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000832  00000000  00000000  00012bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d691  00000000  00000000  000133f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5b4  00000000  00000000  00030a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c23d4  00000000  00000000  0003b037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd40b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  000fd450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00100218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080042f8 	.word	0x080042f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	080042f8 	.word	0x080042f8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 fd37 	bl	80014ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f8aa 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 f960 	bl	8000d14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a54:	f000 f8e6 	bl	8000c24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(100);
  SCR_OFF();  // Make sure that we assume that it is overheated at power up!
 8000a58:	f000 fba4 	bl	80011a4 <SCR_OFF>

	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // Red LED on
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2180      	movs	r1, #128	@ 0x80
 8000a60:	484a      	ldr	r0, [pc, #296]	@ (8000b8c <main+0x148>)
 8000a62:	f002 fc6b 	bl	800333c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET); // Green LED on
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	@ 0x40
 8000a6a:	4848      	ldr	r0, [pc, #288]	@ (8000b8c <main+0x148>)
 8000a6c:	f002 fc66 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000a70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a74:	f000 fd92 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // Red LED on
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2180      	movs	r1, #128	@ 0x80
 8000a7c:	4843      	ldr	r0, [pc, #268]	@ (8000b8c <main+0x148>)
 8000a7e:	f002 fc5d 	bl	800333c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET); // Green LED on
 8000a82:	2201      	movs	r2, #1
 8000a84:	2140      	movs	r1, #64	@ 0x40
 8000a86:	4841      	ldr	r0, [pc, #260]	@ (8000b8c <main+0x148>)
 8000a88:	f002 fc58 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a90:	f000 fd84 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET); // Red LED off
 8000a94:	2200      	movs	r2, #0
 8000a96:	2180      	movs	r1, #128	@ 0x80
 8000a98:	483c      	ldr	r0, [pc, #240]	@ (8000b8c <main+0x148>)
 8000a9a:	f002 fc4f 	bl	800333c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET); // Green LED on
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2140      	movs	r1, #64	@ 0x40
 8000aa2:	483a      	ldr	r0, [pc, #232]	@ (8000b8c <main+0x148>)
 8000aa4:	f002 fc4a 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000aa8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aac:	f000 fd76 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET); // Red LED off
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2180      	movs	r1, #128	@ 0x80
 8000ab4:	4835      	ldr	r0, [pc, #212]	@ (8000b8c <main+0x148>)
 8000ab6:	f002 fc41 	bl	800333c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET); // Green LED on
 8000aba:	2200      	movs	r2, #0
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	4833      	ldr	r0, [pc, #204]	@ (8000b8c <main+0x148>)
 8000ac0:	f002 fc3c 	bl	800333c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Time_Delay1 = analogRead(6);
 8000ac4:	2006      	movs	r0, #6
 8000ac6:	f000 f9ab 	bl	8000e20 <analogRead>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <main+0x14c>)
 8000ad0:	801a      	strh	r2, [r3, #0]
	    D_Time=(Time_Delay1*T_Fact);
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b90 <main+0x14c>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <main+0x150>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b98 <main+0x154>)
 8000ae2:	6013      	str	r3, [r2, #0]

	    Temp_Check();
 8000ae4:	f000 fad8 	bl	8001098 <Temp_Check>
	    if(SCR_STATUS!=0){
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <main+0x158>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d026      	beq.n	8000b3e <main+0xfa>
	      if((HAL_GPIO_ReadPin(Mag_In_GPIO_Port, Mag_In_Pin) == GPIO_PIN_RESET)&&(Time_Delay1>0)){
 8000af0:	2110      	movs	r1, #16
 8000af2:	482b      	ldr	r0, [pc, #172]	@ (8000ba0 <main+0x15c>)
 8000af4:	f002 fc0a 	bl	800330c <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d105      	bne.n	8000b0a <main+0xc6>
 8000afe:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <main+0x14c>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <main+0xc6>
	        AutoMag(); // Magnatize
 8000b06:	f000 fa15 	bl	8000f34 <AutoMag>
	      }
	      if((HAL_GPIO_ReadPin(Demag_In_GPIO_Port, Demag_In_Pin) == GPIO_PIN_RESET)&&(Time_Delay1>0)){
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	4824      	ldr	r0, [pc, #144]	@ (8000ba0 <main+0x15c>)
 8000b0e:	f002 fbfd 	bl	800330c <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d105      	bne.n	8000b24 <main+0xe0>
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <main+0x14c>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <main+0xe0>
	        Demag(); // De-Magnatize
 8000b20:	f000 fa4f 	bl	8000fc2 <Demag>
	      }
	      if((HAL_GPIO_ReadPin(Mag_In_GPIO_Port, Mag_In_Pin) == GPIO_PIN_RESET)&&(Time_Delay1==0)){
 8000b24:	2110      	movs	r1, #16
 8000b26:	481e      	ldr	r0, [pc, #120]	@ (8000ba0 <main+0x15c>)
 8000b28:	f002 fbf0 	bl	800330c <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d105      	bne.n	8000b3e <main+0xfa>
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <main+0x14c>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <main+0xfa>
	        Std_Mag(); // Magnatize
 8000b3a:	f000 f9e3 	bl	8000f04 <Std_Mag>
	      }

	    }
	    if(HAL_GPIO_ReadPin(AC1_Over_Heat_LED_GPIO_Port, AC1_Over_Heat_LED_Pin) == GPIO_PIN_SET){
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4817      	ldr	r0, [pc, #92]	@ (8000ba0 <main+0x15c>)
 8000b42:	f002 fbe3 	bl	800330c <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d101      	bne.n	8000b50 <main+0x10c>
	      PGM_MODE();
 8000b4c:	f000 fb3a 	bl	80011c4 <PGM_MODE>
	    }
	    if((SCR_STATUS==0)){
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <main+0x158>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d109      	bne.n	8000b6c <main+0x128>
	    	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET); // Green LED off
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2140      	movs	r1, #64	@ 0x40
 8000b5c:	480b      	ldr	r0, [pc, #44]	@ (8000b8c <main+0x148>)
 8000b5e:	f002 fbed 	bl	800333c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // Red LED on
 8000b62:	2201      	movs	r2, #1
 8000b64:	2180      	movs	r1, #128	@ 0x80
 8000b66:	4809      	ldr	r0, [pc, #36]	@ (8000b8c <main+0x148>)
 8000b68:	f002 fbe8 	bl	800333c <HAL_GPIO_WritePin>
	    }
	    if((SCR_STATUS==1)){
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <main+0x158>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d1a7      	bne.n	8000ac4 <main+0x80>
	    	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET); // Green LED On
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	@ 0x40
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <main+0x148>)
 8000b7a:	f002 fbdf 	bl	800333c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET); // Red LED Off
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <main+0x148>)
 8000b84:	f002 fbda 	bl	800333c <HAL_GPIO_WritePin>
	  Time_Delay1 = analogRead(6);
 8000b88:	e79c      	b.n	8000ac4 <main+0x80>
 8000b8a:	bf00      	nop
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	200000a4 	.word	0x200000a4
 8000b94:	20000000 	.word	0x20000000
 8000b98:	200000a8 	.word	0x200000a8
 8000b9c:	200000b4 	.word	0x200000b4
 8000ba0:	48000800 	.word	0x48000800

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	@ 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	2238      	movs	r2, #56	@ 0x38
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fb74 	bl	80042a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bca:	f002 fbcf 	bl	800336c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd8:	2340      	movs	r3, #64	@ 0x40
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 fc75 	bl	80034d4 <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bf0:	f000 fb5c 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 ff73 	bl	8003af8 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c18:	f000 fb48 	bl	80012ac <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3750      	adds	r7, #80	@ 0x50
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2220      	movs	r2, #32
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fb2f 	bl	80042a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c42:	4b32      	ldr	r3, [pc, #200]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c4a:	4b30      	ldr	r3, [pc, #192]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c52:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c70:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c82:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8a:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cac:	4817      	ldr	r0, [pc, #92]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000cae:	f000 ff11 	bl	8001ad4 <HAL_ADC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000cb8:	f000 faf8 	bl	80012ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4811      	ldr	r0, [pc, #68]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000cc8:	f002 f816 	bl	8002cf8 <HAL_ADCEx_MultiModeConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cd2:	f000 faeb 	bl	80012ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_ADC1_Init+0xec>)
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cda:	2306      	movs	r3, #6
 8000cdc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce2:	237f      	movs	r3, #127	@ 0x7f
 8000ce4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000cf4:	f001 fa48 	bl	8002188 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000cfe:	f000 fad5 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3730      	adds	r7, #48	@ 0x30
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000038 	.word	0x20000038
 8000d10:	21800100 	.word	0x21800100

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	4a39      	ldr	r2, [pc, #228]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d36:	4b37      	ldr	r3, [pc, #220]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	4a33      	ldr	r2, [pc, #204]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4e:	4b31      	ldr	r3, [pc, #196]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a27      	ldr	r2, [pc, #156]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <MX_GPIO_Init+0x100>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Sig_Oiler_Pin|Sig_Solenoid2_Pin|Sig_Solenoid1_Pin|Sig_Clamp_Pin
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	217f      	movs	r1, #127	@ 0x7f
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d92:	f002 fad3 	bl	800333c <HAL_GPIO_WritePin>
                          |Machine_LED_Pin|Mag_Mosfet_Pin|Demag_Mosfet_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	21c0      	movs	r1, #192	@ 0xc0
 8000d9a:	481f      	ldr	r0, [pc, #124]	@ (8000e18 <MX_GPIO_Init+0x104>)
 8000d9c:	f002 face 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AC1_Over_Heat_LED_Pin */
  GPIO_InitStruct.Pin = AC1_Over_Heat_LED_Pin;
 8000da0:	2302      	movs	r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AC1_Over_Heat_LED_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	481a      	ldr	r0, [pc, #104]	@ (8000e1c <MX_GPIO_Init+0x108>)
 8000db4:	f002 f928 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sig_Oiler_Pin Sig_Solenoid2_Pin Sig_Solenoid1_Pin Sig_Clamp_Pin
                           Machine_LED_Pin Mag_Mosfet_Pin Demag_Mosfet_Pin */
  GPIO_InitStruct.Pin = Sig_Oiler_Pin|Sig_Solenoid2_Pin|Sig_Solenoid1_Pin|Sig_Clamp_Pin
 8000db8:	237f      	movs	r3, #127	@ 0x7f
 8000dba:	617b      	str	r3, [r7, #20]
                          |Machine_LED_Pin|Mag_Mosfet_Pin|Demag_Mosfet_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd2:	f002 f919 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mag_In_Pin Demag_In_Pin */
  GPIO_InitStruct.Pin = Mag_In_Pin|Demag_In_Pin;
 8000dd6:	2330      	movs	r3, #48	@ 0x30
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <MX_GPIO_Init+0x108>)
 8000dea:	f002 f90d 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000dee:	23c0      	movs	r3, #192	@ 0xc0
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <MX_GPIO_Init+0x104>)
 8000e06:	f002 f8ff 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800

08000e20 <analogRead>:

/* USER CODE BEGIN 4 */
uint16_t analogRead(uint32_t channel) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	@ 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

	ADC_ChannelConfTypeDef sConfig = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 fa35 	bl	80042a0 <memset>
	if (channel == 6)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b06      	cmp	r3, #6
 8000e3a:	d102      	bne.n	8000e42 <analogRead+0x22>
		sConfig.Channel = ADC_CHANNEL_6;
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <analogRead+0xd0>)
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e00d      	b.n	8000e5e <analogRead+0x3e>
	else if (channel == 8)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d102      	bne.n	8000e4e <analogRead+0x2e>
		sConfig.Channel = ADC_CHANNEL_8;
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <analogRead+0xd4>)
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e007      	b.n	8000e5e <analogRead+0x3e>
	else if (channel == 9)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	d102      	bne.n	8000e5a <analogRead+0x3a>
		sConfig.Channel = ADC_CHANNEL_9;
 8000e54:	4b28      	ldr	r3, [pc, #160]	@ (8000ef8 <analogRead+0xd8>)
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e001      	b.n	8000e5e <analogRead+0x3e>
	else
		Error_Handler();
 8000e5a:	f000 fa27 	bl	80012ac <Error_Handler>

	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e66:	237f      	movs	r3, #127	@ 0x7f
 8000e68:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	61fb      	str	r3, [r7, #28]
	sConfig.Offset = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	4820      	ldr	r0, [pc, #128]	@ (8000efc <analogRead+0xdc>)
 8000e7a:	f001 f985 	bl	8002188 <HAL_ADC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <analogRead+0x68>
	{
	Error_Handler();
 8000e84:	f000 fa12 	bl	80012ac <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8000e88:	481c      	ldr	r0, [pc, #112]	@ (8000efc <analogRead+0xdc>)
 8000e8a:	f000 ffa7 	bl	8001ddc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8000e8e:	210a      	movs	r1, #10
 8000e90:	481a      	ldr	r0, [pc, #104]	@ (8000efc <analogRead+0xdc>)
 8000e92:	f001 f893 	bl	8001fbc <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue(&hadc1);
 8000e96:	4819      	ldr	r0, [pc, #100]	@ (8000efc <analogRead+0xdc>)
 8000e98:	f001 f968 	bl	800216c <HAL_ADC_GetValue>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	HAL_ADC_Stop(&hadc1);
 8000ea0:	4816      	ldr	r0, [pc, #88]	@ (8000efc <analogRead+0xdc>)
 8000ea2:	f001 f857 	bl	8001f54 <HAL_ADC_Stop>
	return val/4*3.3/5; // 4096->1024 and 5V to 3.3V conversion. legacy to new board
 8000ea6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb05 	bl	80004bc <__aeabi_i2d>
 8000eb2:	a30d      	add	r3, pc, #52	@ (adr r3, 8000ee8 <analogRead+0xc8>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fb6a 	bl	8000590 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <analogRead+0xe0>)
 8000eca:	f7ff fc8b 	bl	80007e4 <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fd95 	bl	8000a04 <__aeabi_d2uiz>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29b      	uxth	r3, r3
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3730      	adds	r7, #48	@ 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	66666666 	.word	0x66666666
 8000eec:	400a6666 	.word	0x400a6666
 8000ef0:	19200040 	.word	0x19200040
 8000ef4:	21800100 	.word	0x21800100
 8000ef8:	25b00200 	.word	0x25b00200
 8000efc:	20000038 	.word	0x20000038
 8000f00:	40140000 	.word	0x40140000

08000f04 <Std_Mag>:
void Std_Mag()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
 Clamp();
 8000f08:	f000 f89a 	bl	8001040 <Clamp>
 HAL_Delay(1000);
 8000f0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f10:	f000 fb44 	bl	800159c <HAL_Delay>
 Mag_Shot();
 8000f14:	f000 f842 	bl	8000f9c <Mag_Shot>
 HAL_Delay(600);
 8000f18:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000f1c:	f000 fb3e 	bl	800159c <HAL_Delay>
 Mag_Shot();
 8000f20:	f000 f83c 	bl	8000f9c <Mag_Shot>
 HAL_Delay(600);
 8000f24:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000f28:	f000 fb38 	bl	800159c <HAL_Delay>
 UnClamp();
 8000f2c:	f000 f892 	bl	8001054 <UnClamp>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <AutoMag>:

void AutoMag()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  Clamp();
 8000f38:	f000 f882 	bl	8001040 <Clamp>
  HAL_Delay(W_Time); // Delay to get hand out of the way.
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <AutoMag+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fb2b 	bl	800159c <HAL_Delay>
  Mag_Shot();
 8000f46:	f000 f829 	bl	8000f9c <Mag_Shot>
  HAL_Delay(W_Time); // Delay to prevent arcing.
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <AutoMag+0x64>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fb24 	bl	800159c <HAL_Delay>
  Water_On();
 8000f54:	f000 f854 	bl	8001000 <Water_On>
  HAL_Delay(500);
 8000f58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f5c:	f000 fb1e 	bl	800159c <HAL_Delay>
  Piss();
 8000f60:	f000 f882 	bl	8001068 <Piss>
  Water_Off();
 8000f64:	f000 f85c 	bl	8001020 <Water_Off>
  Mag_Shot();
 8000f68:	f000 f818 	bl	8000f9c <Mag_Shot>
  HAL_Delay(W_Time);
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <AutoMag+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fb13 	bl	800159c <HAL_Delay>
  Mag_Shot();
 8000f76:	f000 f811 	bl	8000f9c <Mag_Shot>
  HAL_Delay(W_Time);
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <AutoMag+0x64>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fb0c 	bl	800159c <HAL_Delay>
  HAL_Delay(W_Time);
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <AutoMag+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fb07 	bl	800159c <HAL_Delay>
  UnClamp();
 8000f8e:	f000 f861 	bl	8001054 <UnClamp>

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000004 	.word	0x20000004

08000f9c <Mag_Shot>:

#define Mag_Mosfet_Pin GPIO_PIN_5
#define Mag_Mosfet_GPIO_Port GPIOA
void Mag_Shot()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Mag_Mosfet_GPIO_Port, Mag_Mosfet_Pin, GPIO_PIN_SET); // Mag Shot
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa8:	f002 f9c8 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(100); // Delay Time
 8000fac:	2064      	movs	r0, #100	@ 0x64
 8000fae:	f000 faf5 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(Mag_Mosfet_GPIO_Port, Mag_Mosfet_Pin, GPIO_PIN_RESET); // Mag Shot
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fba:	f002 f9bf 	bl	800333c <HAL_GPIO_WritePin>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <Demag>:

void Demag()
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
   Clamp();
 8000fc6:	f000 f83b 	bl	8001040 <Clamp>
  HAL_Delay(1000);
 8000fca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fce:	f000 fae5 	bl	800159c <HAL_Delay>
  HAL_GPIO_WritePin(Demag_Mosfet_GPIO_Port, Demag_Mosfet_Pin, GPIO_PIN_SET); // DE-Mag Shot
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2140      	movs	r1, #64	@ 0x40
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fda:	f002 f9af 	bl	800333c <HAL_GPIO_WritePin>
  HAL_Delay(100); // Delay Time
 8000fde:	2064      	movs	r0, #100	@ 0x64
 8000fe0:	f000 fadc 	bl	800159c <HAL_Delay>
  HAL_GPIO_WritePin(Mag_Mosfet_GPIO_Port, Mag_Mosfet_Pin, GPIO_PIN_RESET); // De-Mag Shot
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f002 f9a6 	bl	800333c <HAL_GPIO_WritePin>
  HAL_Delay(25000);
 8000ff0:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 8000ff4:	f000 fad2 	bl	800159c <HAL_Delay>
  UnClamp();
 8000ff8:	f000 f82c 	bl	8001054 <UnClamp>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Water_On>:

void Water_On()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Sig_Solenoid1_GPIO_Port, Sig_Solenoid1_Pin, GPIO_PIN_RESET); // Water Solenoid 1
 8001004:	2200      	movs	r2, #0
 8001006:	2104      	movs	r1, #4
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f002 f996 	bl	800333c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Sig_Solenoid2_GPIO_Port, Sig_Solenoid2_Pin, GPIO_PIN_SET); // Water Solenoid 2
 8001010:	2201      	movs	r2, #1
 8001012:	2102      	movs	r1, #2
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f002 f990 	bl	800333c <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <Water_Off>:

void Water_Off()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Sig_Solenoid1_GPIO_Port, Sig_Solenoid1_Pin, GPIO_PIN_SET); // Water Solenoid 1
 8001024:	2201      	movs	r2, #1
 8001026:	2104      	movs	r1, #4
 8001028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102c:	f002 f986 	bl	800333c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Sig_Solenoid2_GPIO_Port, Sig_Solenoid2_Pin, GPIO_PIN_RESET); // Water Solenoid 2
 8001030:	2200      	movs	r2, #0
 8001032:	2102      	movs	r1, #2
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f002 f980 	bl	800333c <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <Clamp>:

void Clamp()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Sig_Clamp_GPIO_Port, Sig_Clamp_Pin, GPIO_PIN_SET); // Clamp Head
 8001044:	2201      	movs	r2, #1
 8001046:	2108      	movs	r1, #8
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f002 f976 	bl	800333c <HAL_GPIO_WritePin>

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <UnClamp>:

void UnClamp()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Sig_Clamp_GPIO_Port, Sig_Clamp_Pin, GPIO_PIN_RESET); // Clamp Head
 8001058:	2200      	movs	r2, #0
 800105a:	2108      	movs	r1, #8
 800105c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001060:	f002 f96c 	bl	800333c <HAL_GPIO_WritePin>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <Piss>:

void Piss()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Sig_Oiler_GPIO_Port, Sig_Oiler_Pin, GPIO_PIN_SET); // Oiler On
 800106c:	2201      	movs	r2, #1
 800106e:	2101      	movs	r1, #1
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f002 f962 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(D_Time); // Delay Time
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <Piss+0x2c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fa8d 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(Sig_Oiler_GPIO_Port, Sig_Oiler_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108a:	f002 f957 	bl	800333c <HAL_GPIO_WritePin>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000a8 	.word	0x200000a8

08001098 <Temp_Check>:

void Temp_Check()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  Temp_Sensor1 = (analogRead(8)* 0.48828125);
 800109c:	2008      	movs	r0, #8
 800109e:	f7ff febf 	bl	8000e20 <analogRead>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa09 	bl	80004bc <__aeabi_i2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <Temp_Check+0xd8>)
 80010b0:	f7ff fa6e 	bl	8000590 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fc7a 	bl	80009b4 <__aeabi_d2iz>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001174 <Temp_Check+0xdc>)
 80010c4:	6013      	str	r3, [r2, #0]
  Temp_Sensor2 = (analogRead(9)* 0.48828125);
 80010c6:	2009      	movs	r0, #9
 80010c8:	f7ff feaa 	bl	8000e20 <analogRead>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9f4 	bl	80004bc <__aeabi_i2d>
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <Temp_Check+0xd8>)
 80010da:	f7ff fa59 	bl	8000590 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fc65 	bl	80009b4 <__aeabi_d2iz>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a22      	ldr	r2, [pc, #136]	@ (8001178 <Temp_Check+0xe0>)
 80010ee:	6013      	str	r3, [r2, #0]
  if((Temp_Sensor1>=MAX_TEMP)||(Temp_Sensor2>=MAX_TEMP)){
 80010f0:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <Temp_Check+0xdc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <Temp_Check+0xe4>)
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	da0d      	bge.n	8001128 <Temp_Check+0x90>
 800110c:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <Temp_Check+0xe0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <Temp_Check+0xe4>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	db01      	blt.n	800112c <Temp_Check+0x94>
    SCR_OFF();
 8001128:	f000 f83c 	bl	80011a4 <SCR_OFF>
  }
  if((Temp_Sensor1<=COOL_TEMP)&&(Temp_Sensor2<=COOL_TEMP)){
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <Temp_Check+0xdc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <Temp_Check+0xe8>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d900      	bls.n	800114a <Temp_Check+0xb2>
    SCR_ON();
  }
}
 8001148:	e010      	b.n	800116c <Temp_Check+0xd4>
  if((Temp_Sensor1<=COOL_TEMP)&&(Temp_Sensor2<=COOL_TEMP)){
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <Temp_Check+0xe0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <Temp_Check+0xe8>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	d900      	bls.n	8001168 <Temp_Check+0xd0>
}
 8001166:	e001      	b.n	800116c <Temp_Check+0xd4>
    SCR_ON();
 8001168:	f000 f80c 	bl	8001184 <SCR_ON>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	3fdf4000 	.word	0x3fdf4000
 8001174:	200000ac 	.word	0x200000ac
 8001178:	200000b0 	.word	0x200000b0
 800117c:	20000008 	.word	0x20000008
 8001180:	2000000c 	.word	0x2000000c

08001184 <SCR_ON>:

void SCR_ON(){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Machine_LED_GPIO_Port, Machine_LED_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f002 f8d4 	bl	800333c <HAL_GPIO_WritePin>
	SCR_STATUS=1;
 8001194:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <SCR_ON+0x1c>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000b4 	.word	0x200000b4

080011a4 <SCR_OFF>:

void SCR_OFF(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Machine_LED_GPIO_Port, Machine_LED_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2110      	movs	r1, #16
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f002 f8c4 	bl	800333c <HAL_GPIO_WritePin>
	SCR_STATUS=0;
 80011b4:	4b02      	ldr	r3, [pc, #8]	@ (80011c0 <SCR_OFF+0x1c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000b4 	.word	0x200000b4

080011c4 <PGM_MODE>:

void PGM_MODE()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	//PGM Mode On
 while(HAL_GPIO_ReadPin(AC1_Over_Heat_LED_GPIO_Port, AC1_Over_Heat_LED_Pin) == GPIO_PIN_SET){
 80011c8:	e034      	b.n	8001234 <PGM_MODE+0x70>

  Time_Delay1 = analogRead(6);
 80011ca:	2006      	movs	r0, #6
 80011cc:	f7ff fe28 	bl	8000e20 <analogRead>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <PGM_MODE+0x84>)
 80011d6:	801a      	strh	r2, [r3, #0]
  D_Time=(Time_Delay1*T_Fact);
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <PGM_MODE+0x84>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <PGM_MODE+0x88>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001250 <PGM_MODE+0x8c>)
 80011e8:	6013      	str	r3, [r2, #0]

  Temp_Check();
 80011ea:	f7ff ff55 	bl	8001098 <Temp_Check>
  if(SCR_STATUS!=0){
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <PGM_MODE+0x90>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01e      	beq.n	8001234 <PGM_MODE+0x70>
    if((HAL_GPIO_ReadPin(Demag_In_GPIO_Port, Demag_In_Pin) == GPIO_PIN_RESET)&&(Time_Delay1>0)){
 80011f6:	2120      	movs	r1, #32
 80011f8:	4817      	ldr	r0, [pc, #92]	@ (8001258 <PGM_MODE+0x94>)
 80011fa:	f002 f887 	bl	800330c <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10a      	bne.n	800121a <PGM_MODE+0x56>
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <PGM_MODE+0x84>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <PGM_MODE+0x56>
      Piss(); // Magnetize
 800120c:	f7ff ff2c 	bl	8001068 <Piss>
      HAL_Delay(D_Time); // Return Delay Time
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <PGM_MODE+0x8c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f9c1 	bl	800159c <HAL_Delay>
    }
    if(HAL_GPIO_ReadPin(Mag_In_GPIO_Port, Mag_In_Pin) == GPIO_PIN_RESET){
 800121a:	2110      	movs	r1, #16
 800121c:	480e      	ldr	r0, [pc, #56]	@ (8001258 <PGM_MODE+0x94>)
 800121e:	f002 f875 	bl	800330c <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d105      	bne.n	8001234 <PGM_MODE+0x70>
      Clamp();
 8001228:	f7ff ff0a 	bl	8001040 <Clamp>
      MAG_SETUP(); // De-Magnatize
 800122c:	f000 f816 	bl	800125c <MAG_SETUP>
      UnClamp();
 8001230:	f7ff ff10 	bl	8001054 <UnClamp>
 while(HAL_GPIO_ReadPin(AC1_Over_Heat_LED_GPIO_Port, AC1_Over_Heat_LED_Pin) == GPIO_PIN_SET){
 8001234:	2102      	movs	r1, #2
 8001236:	4808      	ldr	r0, [pc, #32]	@ (8001258 <PGM_MODE+0x94>)
 8001238:	f002 f868 	bl	800330c <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d0c3      	beq.n	80011ca <PGM_MODE+0x6>
    }
   }
 }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000a4 	.word	0x200000a4
 800124c:	20000000 	.word	0x20000000
 8001250:	200000a8 	.word	0x200000a8
 8001254:	200000b4 	.word	0x200000b4
 8001258:	48000800 	.word	0x48000800

0800125c <MAG_SETUP>:

void MAG_SETUP()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(AC1_Over_Heat_LED_GPIO_Port, AC1_Over_Heat_LED_Pin) == GPIO_PIN_SET){
 8001260:	e015      	b.n	800128e <MAG_SETUP+0x32>
     if(HAL_GPIO_ReadPin(Demag_In_GPIO_Port, Demag_In_Pin) == GPIO_PIN_RESET){
 8001262:	2120      	movs	r1, #32
 8001264:	480f      	ldr	r0, [pc, #60]	@ (80012a4 <MAG_SETUP+0x48>)
 8001266:	f002 f851 	bl	800330c <HAL_GPIO_ReadPin>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d016      	beq.n	800129e <MAG_SETUP+0x42>
       break;
     }
     if(HAL_GPIO_ReadPin(Mag_In_GPIO_Port, Mag_In_Pin) == GPIO_PIN_RESET){
 8001270:	2110      	movs	r1, #16
 8001272:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <MAG_SETUP+0x48>)
 8001274:	f002 f84a 	bl	800330c <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d107      	bne.n	800128e <MAG_SETUP+0x32>
       Temp_Check();
 800127e:	f7ff ff0b 	bl	8001098 <Temp_Check>
       if(SCR_STATUS!=0){
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MAG_SETUP+0x4c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MAG_SETUP+0x32>
         Mag_Shot();
 800128a:	f7ff fe87 	bl	8000f9c <Mag_Shot>
   while(HAL_GPIO_ReadPin(AC1_Over_Heat_LED_GPIO_Port, AC1_Over_Heat_LED_Pin) == GPIO_PIN_SET){
 800128e:	2102      	movs	r1, #2
 8001290:	4804      	ldr	r0, [pc, #16]	@ (80012a4 <MAG_SETUP+0x48>)
 8001292:	f002 f83b 	bl	800330c <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d0e2      	beq.n	8001262 <MAG_SETUP+0x6>
       }
     }
   }
}
 800129c:	e000      	b.n	80012a0 <MAG_SETUP+0x44>
       break;
 800129e:	bf00      	nop
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800
 80012a8:	200000b4 	.word	0x200000b4

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {

	  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET); // Green LED On
 80012b4:	2201      	movs	r2, #1
 80012b6:	2140      	movs	r1, #64	@ 0x40
 80012b8:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <Error_Handler+0x44>)
 80012ba:	f002 f83f 	bl	800333c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // Red LED On
 80012be:	2201      	movs	r2, #1
 80012c0:	2180      	movs	r1, #128	@ 0x80
 80012c2:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <Error_Handler+0x44>)
 80012c4:	f002 f83a 	bl	800333c <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 80012c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012cc:	f000 f966 	bl	800159c <HAL_Delay>
	  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET); // Green LED On
 80012d0:	2200      	movs	r2, #0
 80012d2:	2140      	movs	r1, #64	@ 0x40
 80012d4:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <Error_Handler+0x44>)
 80012d6:	f002 f831 	bl	800333c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET); // Red LED On
 80012da:	2200      	movs	r2, #0
 80012dc:	2180      	movs	r1, #128	@ 0x80
 80012de:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <Error_Handler+0x44>)
 80012e0:	f002 f82c 	bl	800333c <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 80012e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e8:	f000 f958 	bl	800159c <HAL_Delay>
	  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET); // Green LED On
 80012ec:	bf00      	nop
 80012ee:	e7e1      	b.n	80012b4 <Error_Handler+0x8>
 80012f0:	48000400 	.word	0x48000400

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001338 <HAL_MspInit+0x44>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6613      	str	r3, [r2, #96]	@ 0x60
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_MspInit+0x44>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_MspInit+0x44>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6593      	str	r3, [r2, #88]	@ 0x58
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_MspInit+0x44>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800132a:	f002 f8c3 	bl	80034b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b09a      	sub	sp, #104	@ 0x68
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	2244      	movs	r2, #68	@ 0x44
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f002 ff9f 	bl	80042a0 <memset>
  if(hadc->Instance==ADC1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800136a:	d133      	bne.n	80013d4 <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800136c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001370:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001372:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001376:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fd9f 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001388:	f7ff ff90 	bl	80012ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <HAL_ADC_MspInit+0xa0>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <HAL_ADC_MspInit+0xa0>)
 8001392:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <HAL_ADC_MspInit+0xa0>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <HAL_ADC_MspInit+0xa0>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <HAL_ADC_MspInit+0xa0>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_ADC_MspInit+0xa0>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Spray_Time_Pin|Temp_Sensor1_Pin|Temp_Sensor2_Pin;
 80013bc:	230d      	movs	r3, #13
 80013be:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013cc:	4619      	mov	r1, r3
 80013ce:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <HAL_ADC_MspInit+0xa4>)
 80013d0:	f001 fe1a 	bl	8003008 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013d4:	bf00      	nop
 80013d6:	3768      	adds	r7, #104	@ 0x68
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000800 	.word	0x48000800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <NMI_Handler+0x4>

080013ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <MemManage_Handler+0x4>

080013fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <UsageFault_Handler+0x4>

0800140c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143a:	f000 f891 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001468:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f002 ff0b 	bl	80042b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff fad3 	bl	8000a44 <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   r0, =_estack
 80014a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80014ac:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 80014b0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80014b4:	200000bc 	.word	0x200000bc

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>

080014ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f001 fd6d 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	200f      	movs	r0, #15
 80014cc:	f000 f80e 	bl	80014ec <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e001      	b.n	80014e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014dc:	f7ff ff0a 	bl	80012f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e0:	79fb      	ldrb	r3, [r7, #7]

}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_InitTick+0x68>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d022      	beq.n	8001546 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_InitTick+0x6c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_InitTick+0x68>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800150c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fd6a 	bl	8002fee <HAL_SYSTICK_Config>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d809      	bhi.n	800153a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001526:	2200      	movs	r2, #0
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800152e:	f001 fd44 	bl	8002fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <HAL_InitTick+0x70>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e007      	b.n	800154a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e004      	b.n	800154a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e001      	b.n	800154a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000018 	.word	0x20000018
 8001558:	20000010 	.word	0x20000010
 800155c:	20000014 	.word	0x20000014

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_IncTick+0x1c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_IncTick+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a03      	ldr	r2, [pc, #12]	@ (800157c <HAL_IncTick+0x1c>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	200000b8 	.word	0x200000b8
 8001580:	20000018 	.word	0x20000018

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200000b8 	.word	0x200000b8

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015b4:	d004      	beq.n	80015c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_Delay+0x40>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c0:	bf00      	nop
 80015c2:	f7ff ffdf 	bl	8001584 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d8f7      	bhi.n	80015c2 <HAL_Delay+0x26>
  {
  }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000018 	.word	0x20000018

080015e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	609a      	str	r2, [r3, #8]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	609a      	str	r2, [r3, #8]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3360      	adds	r3, #96	@ 0x60
 800165a:	461a      	mov	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <LL_ADC_SetOffset+0x44>)
 800166a:	4013      	ands	r3, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	4313      	orrs	r3, r2
 8001678:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001680:	bf00      	nop
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	03fff000 	.word	0x03fff000

08001690 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3360      	adds	r3, #96	@ 0x60
 800169e:	461a      	mov	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3360      	adds	r3, #96	@ 0x60
 80016cc:	461a      	mov	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016e6:	bf00      	nop
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b087      	sub	sp, #28
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3360      	adds	r3, #96	@ 0x60
 8001702:	461a      	mov	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	431a      	orrs	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3360      	adds	r3, #96	@ 0x60
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	431a      	orrs	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001752:	bf00      	nop
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	615a      	str	r2, [r3, #20]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b087      	sub	sp, #28
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3330      	adds	r3, #48	@ 0x30
 80017ba:	461a      	mov	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	4413      	add	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	211f      	movs	r1, #31
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0e9b      	lsrs	r3, r3, #26
 80017e2:	f003 011f 	and.w	r1, r3, #31
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017f6:	bf00      	nop
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001802:	b480      	push	{r7}
 8001804:	b087      	sub	sp, #28
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3314      	adds	r3, #20
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	0e5b      	lsrs	r3, r3, #25
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	0d1b      	lsrs	r3, r3, #20
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	2107      	movs	r1, #7
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	0d1b      	lsrs	r3, r3, #20
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	431a      	orrs	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800184c:	bf00      	nop
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0318 	and.w	r3, r3, #24
 800187a:	4908      	ldr	r1, [pc, #32]	@ (800189c <LL_ADC_SetChannelSingleDiff+0x44>)
 800187c:	40d9      	lsrs	r1, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	400b      	ands	r3, r1
 8001882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001886:	431a      	orrs	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	0007ffff 	.word	0x0007ffff

080018a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 031f 	and.w	r3, r3, #31
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6093      	str	r3, [r2, #8]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800190c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001910:	d101      	bne.n	8001916 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001938:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001960:	d101      	bne.n	8001966 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001984:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019b0:	f043 0202 	orr.w	r2, r3, #2
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <LL_ADC_IsEnabled+0x18>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <LL_ADC_IsEnabled+0x1a>
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d101      	bne.n	8001a02 <LL_ADC_IsDisableOngoing+0x18>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <LL_ADC_IsDisableOngoing+0x1a>
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a24:	f043 0204 	orr.w	r2, r3, #4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d101      	bne.n	8001a78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a9a:	f043 0220 	orr.w	r2, r3, #32
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d101      	bne.n	8001ac6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e167      	b.n	8001dbe <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fc1d 	bl	800133c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fef1 	bl	80018fc <LL_ADC_IsDeepPowerDownEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fed7 	bl	80018d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff0c 	bl	800194c <LL_ADC_IsInternalRegulatorEnabled>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fef0 	bl	8001924 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b44:	4ba0      	ldr	r3, [pc, #640]	@ (8001dc8 <HAL_ADC_Init+0x2f4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	4aa0      	ldr	r2, [pc, #640]	@ (8001dcc <HAL_ADC_Init+0x2f8>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b58:	e002      	b.n	8001b60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff feee 	bl	800194c <LL_ADC_IsInternalRegulatorEnabled>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff62 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8001b9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8100 	bne.w	8001dac <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80fc 	bne.w	8001dac <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bbc:	f043 0202 	orr.w	r2, r3, #2
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fefb 	bl	80019c4 <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d111      	bne.n	8001bf8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001bd8:	f7ff fef4 	bl	80019c4 <LL_ADC_IsEnabled>
 8001bdc:	4604      	mov	r4, r0
 8001bde:	487c      	ldr	r0, [pc, #496]	@ (8001dd0 <HAL_ADC_Init+0x2fc>)
 8001be0:	f7ff fef0 	bl	80019c4 <LL_ADC_IsEnabled>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4323      	orrs	r3, r4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4878      	ldr	r0, [pc, #480]	@ (8001dd4 <HAL_ADC_Init+0x300>)
 8001bf4:	f7ff fcf4 	bl	80015e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7f5b      	ldrb	r3, [r3, #29]
 8001bfc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c02:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c08:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c0e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c16:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d106      	bne.n	8001c34 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	045b      	lsls	r3, r3, #17
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	4b60      	ldr	r3, [pc, #384]	@ (8001dd8 <HAL_ADC_Init+0x304>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff15 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 8001c84:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d16d      	bne.n	8001d68 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d16a      	bne.n	8001d68 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c96:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c9e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cae:	f023 0302 	bic.w	r3, r3, #2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d017      	beq.n	8001cf4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001cd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001cdc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ce0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6911      	ldr	r1, [r2, #16]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	430b      	orrs	r3, r1
 8001cee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001cf2:	e013      	b.n	8001d1c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001d02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d18:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d118      	bne.n	8001d58 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	e007      	b.n	8001d68 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10c      	bne.n	8001d8a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f023 010f 	bic.w	r1, r3, #15
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d88:	e007      	b.n	8001d9a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020f 	bic.w	r2, r2, #15
 8001d98:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001daa:	e007      	b.n	8001dbc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000010 	.word	0x20000010
 8001dcc:	053e2d63 	.word	0x053e2d63
 8001dd0:	50000100 	.word	0x50000100
 8001dd4:	50000300 	.word	0x50000300
 8001dd8:	fff04007 	.word	0xfff04007

08001ddc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de4:	4859      	ldr	r0, [pc, #356]	@ (8001f4c <HAL_ADC_Start+0x170>)
 8001de6:	f7ff fd5b 	bl	80018a0 <LL_ADC_GetMultimode>
 8001dea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fe35 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 809f 	bne.w	8001f3c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_Start+0x30>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e09a      	b.n	8001f42 <HAL_ADC_Start+0x166>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fe63 	bl	8002ae0 <ADC_Enable>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f040 8086 	bne.w	8001f32 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a44      	ldr	r2, [pc, #272]	@ (8001f50 <HAL_ADC_Start+0x174>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d002      	beq.n	8001e4a <HAL_ADC_Start+0x6e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e001      	b.n	8001e4e <HAL_ADC_Start+0x72>
 8001e4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d002      	beq.n	8001e5c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e74:	d106      	bne.n	8001e84 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7a:	f023 0206 	bic.w	r2, r3, #6
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	661a      	str	r2, [r3, #96]	@ 0x60
 8001e82:	e002      	b.n	8001e8a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	221c      	movs	r2, #28
 8001e90:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f50 <HAL_ADC_Start+0x174>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d002      	beq.n	8001eaa <HAL_ADC_Start+0xce>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	e001      	b.n	8001eae <HAL_ADC_Start+0xd2>
 8001eaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d002      	beq.n	8001ec8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d114      	bne.n	8001ef2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eda:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ede:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fd90 	bl	8001a10 <LL_ADC_REG_StartConversion>
 8001ef0:	e026      	b.n	8001f40 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <HAL_ADC_Start+0x174>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d002      	beq.n	8001f0e <HAL_ADC_Start+0x132>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e001      	b.n	8001f12 <HAL_ADC_Start+0x136>
 8001f0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f12:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00f      	beq.n	8001f40 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f30:	e006      	b.n	8001f40 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001f3a:	e001      	b.n	8001f40 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	50000300 	.word	0x50000300
 8001f50:	50000100 	.word	0x50000100

08001f54 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Stop+0x16>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e023      	b.n	8001fb2 <HAL_ADC_Stop+0x5e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f72:	2103      	movs	r1, #3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fcf7 	bl	8002968 <ADC_ConversionStop>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fe31 	bl	8002bec <ADC_Disable>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc6:	4867      	ldr	r0, [pc, #412]	@ (8002164 <HAL_ADC_PollForConversion+0x1a8>)
 8001fc8:	f7ff fc6a 	bl	80018a0 <LL_ADC_GetMultimode>
 8001fcc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d102      	bne.n	8001fdc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e02a      	b.n	8002032 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d002      	beq.n	8001fee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	d111      	bne.n	8002012 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0a6      	b.n	800215a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800200c:	2304      	movs	r3, #4
 800200e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002010:	e00f      	b.n	8002032 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002012:	4854      	ldr	r0, [pc, #336]	@ (8002164 <HAL_ADC_PollForConversion+0x1a8>)
 8002014:	f7ff fc52 	bl	80018bc <LL_ADC_GetMultiDMATransfer>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e095      	b.n	800215a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800202e:	2304      	movs	r3, #4
 8002030:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002032:	f7ff faa7 	bl	8001584 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002038:	e021      	b.n	800207e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002040:	d01d      	beq.n	800207e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002042:	f7ff fa9f 	bl	8001584 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d302      	bcc.n	8002058 <HAL_ADC_PollForConversion+0x9c>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d112      	bne.n	800207e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10b      	bne.n	800207e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206a:	f043 0204 	orr.w	r2, r3, #4
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e06d      	b.n	800215a <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0d6      	beq.n	800203a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fb71 	bl	8001784 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7f5b      	ldrb	r3, [r3, #29]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d118      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d111      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a20      	ldr	r2, [pc, #128]	@ (8002168 <HAL_ADC_PollForConversion+0x1ac>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d002      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x136>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e001      	b.n	80020f6 <HAL_ADC_PollForConversion+0x13a>
 80020f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d008      	beq.n	8002110 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b05      	cmp	r3, #5
 8002108:	d002      	beq.n	8002110 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b09      	cmp	r3, #9
 800210e:	d104      	bne.n	800211a <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	e00d      	b.n	8002136 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <HAL_ADC_PollForConversion+0x1ac>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d002      	beq.n	800212a <HAL_ADC_PollForConversion+0x16e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	e001      	b.n	800212e <HAL_ADC_PollForConversion+0x172>
 800212a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800212e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d104      	bne.n	8002146 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2208      	movs	r2, #8
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e008      	b.n	8002158 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d103      	bne.n	8002158 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	220c      	movs	r2, #12
 8002156:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	50000300 	.word	0x50000300
 8002168:	50000100 	.word	0x50000100

0800216c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0b6      	sub	sp, #216	@ 0xd8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x22>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e3c8      	b.n	800293c <HAL_ADC_ConfigChannel+0x7b4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fc52 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 83ad 	bne.w	800291e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f7ff faea 	bl	80017aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fc40 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 80021e0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fc60 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 80021ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 81d9 	bne.w	80025ae <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 81d4 	bne.w	80025ae <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800220e:	d10f      	bne.n	8002230 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	4619      	mov	r1, r3
 800221c:	f7ff faf1 	bl	8001802 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fa98 	bl	800175e <LL_ADC_SetSamplingTimeCommonConfig>
 800222e:	e00e      	b.n	800224e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	461a      	mov	r2, r3
 800223e:	f7ff fae0 	bl	8001802 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fa88 	bl	800175e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	08db      	lsrs	r3, r3, #3
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d022      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6919      	ldr	r1, [r3, #16]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002280:	f7ff f9e2 	bl	8001648 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6919      	ldr	r1, [r3, #16]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	461a      	mov	r2, r3
 8002292:	f7ff fa2e 	bl	80016f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x124>
 80022a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022aa:	e000      	b.n	80022ae <HAL_ADC_ConfigChannel+0x126>
 80022ac:	2300      	movs	r3, #0
 80022ae:	461a      	mov	r2, r3
 80022b0:	f7ff fa3a 	bl	8001728 <LL_ADC_SetOffsetSaturation>
 80022b4:	e17b      	b.n	80025ae <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f9e7 	bl	8001690 <LL_ADC_GetOffsetChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x15a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f9dc 	bl	8001690 <LL_ADC_GetOffsetChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	0e9b      	lsrs	r3, r3, #26
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	e01e      	b.n	8002320 <HAL_ADC_ConfigChannel+0x198>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff f9d1 	bl	8001690 <LL_ADC_GetOffsetChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e004      	b.n	800231e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1b0>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	e018      	b.n	800236a <HAL_ADC_ConfigChannel+0x1e2>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800234c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002354:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800235c:	2320      	movs	r3, #32
 800235e:	e004      	b.n	800236a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002360:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800236a:	429a      	cmp	r2, r3
 800236c:	d106      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f9a0 	bl	80016bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f984 	bl	8001690 <LL_ADC_GetOffsetChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x220>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff f979 	bl	8001690 <LL_ADC_GetOffsetChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	0e9b      	lsrs	r3, r3, #26
 80023a2:	f003 021f 	and.w	r2, r3, #31
 80023a6:	e01e      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x25e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff f96e 	bl	8001690 <LL_ADC_GetOffsetChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80023c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80023ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80023d6:	2320      	movs	r3, #32
 80023d8:	e004      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80023da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x276>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0e9b      	lsrs	r3, r3, #26
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	e018      	b.n	8002430 <HAL_ADC_ConfigChannel+0x2a8>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002412:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800241a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e004      	b.n	8002430 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002426:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2200      	movs	r2, #0
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f93d 	bl	80016bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2102      	movs	r1, #2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f921 	bl	8001690 <LL_ADC_GetOffsetChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <HAL_ADC_ConfigChannel+0x2e6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f916 	bl	8001690 <LL_ADC_GetOffsetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	0e9b      	lsrs	r3, r3, #26
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	e01e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2102      	movs	r1, #2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f90b 	bl	8001690 <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800248c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002490:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002494:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800249c:	2320      	movs	r3, #32
 800249e:	e004      	b.n	80024aa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80024a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x33c>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	e016      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x36a>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80024d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80024dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e004      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80024e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d106      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2200      	movs	r2, #0
 80024fc:	2102      	movs	r1, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f8dc 	bl	80016bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2103      	movs	r1, #3
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f8c0 	bl	8001690 <LL_ADC_GetOffsetChannel>
 8002510:	4603      	mov	r3, r0
 8002512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10a      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x3a8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2103      	movs	r1, #3
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f8b5 	bl	8001690 <LL_ADC_GetOffsetChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	f003 021f 	and.w	r2, r3, #31
 800252e:	e017      	b.n	8002560 <HAL_ADC_ConfigChannel+0x3d8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2103      	movs	r1, #3
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f8aa 	bl	8001690 <LL_ADC_GetOffsetChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002548:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800254a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800254c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e003      	b.n	800255e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002556:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x3f0>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	e011      	b.n	800259c <HAL_ADC_ConfigChannel+0x414>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002588:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800258a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e003      	b.n	800259c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800259c:	429a      	cmp	r2, r3
 800259e:	d106      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2200      	movs	r2, #0
 80025a6:	2103      	movs	r1, #3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f887 	bl	80016bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fa06 	bl	80019c4 <LL_ADC_IsEnabled>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 8140 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	461a      	mov	r2, r3
 80025ce:	f7ff f943 	bl	8001858 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	4a8f      	ldr	r2, [pc, #572]	@ (8002814 <HAL_ADC_ConfigChannel+0x68c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	f040 8131 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x47e>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	0e9b      	lsrs	r3, r3, #26
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2b09      	cmp	r3, #9
 80025fc:	bf94      	ite	ls
 80025fe:	2301      	movls	r3, #1
 8002600:	2300      	movhi	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e019      	b.n	800263a <HAL_ADC_ConfigChannel+0x4b2>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002614:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002616:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002618:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e003      	b.n	800262a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2b09      	cmp	r3, #9
 8002632:	bf94      	ite	ls
 8002634:	2301      	movls	r3, #1
 8002636:	2300      	movhi	r3, #0
 8002638:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800263a:	2b00      	cmp	r3, #0
 800263c:	d079      	beq.n	8002732 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002646:	2b00      	cmp	r3, #0
 8002648:	d107      	bne.n	800265a <HAL_ADC_ConfigChannel+0x4d2>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	3301      	adds	r3, #1
 8002652:	069b      	lsls	r3, r3, #26
 8002654:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002658:	e015      	b.n	8002686 <HAL_ADC_ConfigChannel+0x4fe>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800266a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800266c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002672:	2320      	movs	r3, #32
 8002674:	e003      	b.n	800267e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	3301      	adds	r3, #1
 8002680:	069b      	lsls	r3, r3, #26
 8002682:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x51e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0e9b      	lsrs	r3, r3, #26
 8002698:	3301      	adds	r3, #1
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	e017      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x54e>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80026b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80026b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80026be:	2320      	movs	r3, #32
 80026c0:	e003      	b.n	80026ca <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80026c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	ea42 0103 	orr.w	r1, r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x574>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	3301      	adds	r3, #1
 80026ee:	f003 021f 	and.w	r2, r3, #31
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	051b      	lsls	r3, r3, #20
 80026fa:	e018      	b.n	800272e <HAL_ADC_ConfigChannel+0x5a6>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800270e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272e:	430b      	orrs	r3, r1
 8002730:	e081      	b.n	8002836 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d107      	bne.n	800274e <HAL_ADC_ConfigChannel+0x5c6>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	3301      	adds	r3, #1
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800274c:	e015      	b.n	800277a <HAL_ADC_ConfigChannel+0x5f2>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e003      	b.n	8002772 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	3301      	adds	r3, #1
 8002774:	069b      	lsls	r3, r3, #26
 8002776:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_ADC_ConfigChannel+0x612>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	3301      	adds	r3, #1
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	e017      	b.n	80027ca <HAL_ADC_ConfigChannel+0x642>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	61fb      	str	r3, [r7, #28]
  return result;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e003      	b.n	80027be <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	2101      	movs	r1, #1
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	ea42 0103 	orr.w	r1, r2, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x66e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	3b1e      	subs	r3, #30
 80027ee:	051b      	lsls	r3, r3, #20
 80027f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027f4:	e01e      	b.n	8002834 <HAL_ADC_ConfigChannel+0x6ac>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	613b      	str	r3, [r7, #16]
  return result;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d104      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800280e:	2320      	movs	r3, #32
 8002810:	e006      	b.n	8002820 <HAL_ADC_ConfigChannel+0x698>
 8002812:	bf00      	nop
 8002814:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f003 021f 	and.w	r2, r3, #31
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	3b1e      	subs	r3, #30
 800282e:	051b      	lsls	r3, r3, #20
 8002830:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002834:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800283a:	4619      	mov	r1, r3
 800283c:	f7fe ffe1 	bl	8001802 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_ADC_ConfigChannel+0x7bc>)
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d071      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800284c:	483e      	ldr	r0, [pc, #248]	@ (8002948 <HAL_ADC_ConfigChannel+0x7c0>)
 800284e:	f7fe feed 	bl	800162c <LL_ADC_GetCommonPathInternalCh>
 8002852:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3c      	ldr	r2, [pc, #240]	@ (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_ADC_ConfigChannel+0x6e2>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3a      	ldr	r2, [pc, #232]	@ (8002950 <HAL_ADC_ConfigChannel+0x7c8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d127      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800286a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800286e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d121      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800287e:	d157      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002884:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002888:	4619      	mov	r1, r3
 800288a:	482f      	ldr	r0, [pc, #188]	@ (8002948 <HAL_ADC_ConfigChannel+0x7c0>)
 800288c:	f7fe febb 	bl	8001606 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002890:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <HAL_ADC_ConfigChannel+0x7cc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	4a30      	ldr	r2, [pc, #192]	@ (8002958 <HAL_ADC_ConfigChannel+0x7d0>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b8:	e03a      	b.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a27      	ldr	r2, [pc, #156]	@ (800295c <HAL_ADC_ConfigChannel+0x7d4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d113      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10d      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a22      	ldr	r2, [pc, #136]	@ (8002960 <HAL_ADC_ConfigChannel+0x7d8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02a      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	4619      	mov	r1, r3
 80028e4:	4818      	ldr	r0, [pc, #96]	@ (8002948 <HAL_ADC_ConfigChannel+0x7c0>)
 80028e6:	f7fe fe8e 	bl	8001606 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ea:	e021      	b.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <HAL_ADC_ConfigChannel+0x7dc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d11c      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d116      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a16      	ldr	r2, [pc, #88]	@ (8002960 <HAL_ADC_ConfigChannel+0x7d8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d011      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800290c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002910:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002914:	4619      	mov	r1, r3
 8002916:	480c      	ldr	r0, [pc, #48]	@ (8002948 <HAL_ADC_ConfigChannel+0x7c0>)
 8002918:	f7fe fe75 	bl	8001606 <LL_ADC_SetCommonPathInternalCh>
 800291c:	e008      	b.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002938:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800293c:	4618      	mov	r0, r3
 800293e:	37d8      	adds	r7, #216	@ 0xd8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	80080000 	.word	0x80080000
 8002948:	50000300 	.word	0x50000300
 800294c:	c3210000 	.word	0xc3210000
 8002950:	90c00010 	.word	0x90c00010
 8002954:	20000010 	.word	0x20000010
 8002958:	053e2d63 	.word	0x053e2d63
 800295c:	c7520000 	.word	0xc7520000
 8002960:	50000100 	.word	0x50000100
 8002964:	cb840000 	.word	0xcb840000

08002968 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f86e 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8002984:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f88f 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 8002990:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8098 	beq.w	8002ad0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d02a      	beq.n	8002a04 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7f5b      	ldrb	r3, [r3, #29]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d126      	bne.n	8002a04 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7f1b      	ldrb	r3, [r3, #28]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d122      	bne.n	8002a04 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80029be:	2301      	movs	r3, #1
 80029c0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029c2:	e014      	b.n	80029ee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	4a45      	ldr	r2, [pc, #276]	@ (8002adc <ADC_ConversionStop+0x174>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d90d      	bls.n	80029e8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	f043 0210 	orr.w	r2, r3, #16
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e074      	b.n	8002ad2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	3301      	adds	r3, #1
 80029ec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f8:	2b40      	cmp	r3, #64	@ 0x40
 80029fa:	d1e3      	bne.n	80029c4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d014      	beq.n	8002a34 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f826 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe ffe3 	bl	80019ea <LL_ADC_IsDisableOngoing>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f802 	bl	8001a38 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d014      	beq.n	8002a64 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f835 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe ffcb 	bl	80019ea <LL_ADC_IsDisableOngoing>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f811 	bl	8001a86 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d005      	beq.n	8002a76 <ADC_ConversionStop+0x10e>
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d105      	bne.n	8002a7c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a70:	230c      	movs	r3, #12
 8002a72:	617b      	str	r3, [r7, #20]
        break;
 8002a74:	e005      	b.n	8002a82 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a76:	2308      	movs	r3, #8
 8002a78:	617b      	str	r3, [r7, #20]
        break;
 8002a7a:	e002      	b.n	8002a82 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	617b      	str	r3, [r7, #20]
        break;
 8002a80:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a82:	f7fe fd7f 	bl	8001584 <HAL_GetTick>
 8002a86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a88:	e01b      	b.n	8002ac2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a8a:	f7fe fd7b 	bl	8001584 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d914      	bls.n	8002ac2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	f043 0210 	orr.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e007      	b.n	8002ad2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1dc      	bne.n	8002a8a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	a33fffff 	.word	0xa33fffff

08002ae0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe ff67 	bl	80019c4 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d169      	bne.n	8002bd0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	4b36      	ldr	r3, [pc, #216]	@ (8002bdc <ADC_Enable+0xfc>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	f043 0210 	orr.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e055      	b.n	8002bd2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe ff22 	bl	8001974 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b30:	482b      	ldr	r0, [pc, #172]	@ (8002be0 <ADC_Enable+0x100>)
 8002b32:	f7fe fd7b 	bl	800162c <LL_ADC_GetCommonPathInternalCh>
 8002b36:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <ADC_Enable+0x104>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	4a28      	ldr	r2, [pc, #160]	@ (8002be8 <ADC_Enable+0x108>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b5a:	e002      	b.n	8002b62 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f9      	bne.n	8002b5c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b68:	f7fe fd0c 	bl	8001584 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6e:	e028      	b.n	8002bc2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe ff25 	bl	80019c4 <LL_ADC_IsEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fef5 	bl	8001974 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b8a:	f7fe fcfb 	bl	8001584 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d914      	bls.n	8002bc2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d00d      	beq.n	8002bc2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e007      	b.n	8002bd2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d1cf      	bne.n	8002b70 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	8000003f 	.word	0x8000003f
 8002be0:	50000300 	.word	0x50000300
 8002be4:	20000010 	.word	0x20000010
 8002be8:	053e2d63 	.word	0x053e2d63

08002bec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe fef6 	bl	80019ea <LL_ADC_IsDisableOngoing>
 8002bfe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fedd 	bl	80019c4 <LL_ADC_IsEnabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d047      	beq.n	8002ca0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d144      	bne.n	8002ca0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030d 	and.w	r3, r3, #13
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10c      	bne.n	8002c3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe feb7 	bl	800199c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2203      	movs	r2, #3
 8002c34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c36:	f7fe fca5 	bl	8001584 <HAL_GetTick>
 8002c3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c3c:	e029      	b.n	8002c92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e023      	b.n	8002ca2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c5a:	f7fe fc93 	bl	8001584 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d914      	bls.n	8002c92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7a:	f043 0210 	orr.w	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e007      	b.n	8002ca2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1dc      	bne.n	8002c5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <LL_ADC_IsEnabled>:
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <LL_ADC_IsEnabled+0x18>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_ADC_IsEnabled+0x1a>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d101      	bne.n	8002ce8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b0a1      	sub	sp, #132	@ 0x84
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e08b      	b.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d22:	2300      	movs	r3, #0
 8002d24:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d2e:	d102      	bne.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d30:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	e001      	b.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e06a      	b.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ffb8 	bl	8002cd0 <LL_ADC_REG_IsConversionOngoing>
 8002d60:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ffb2 	bl	8002cd0 <LL_ADC_REG_IsConversionOngoing>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d14c      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d149      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d78:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002d7a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d028      	beq.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d96:	035b      	lsls	r3, r3, #13
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002da0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002da4:	f7ff ff81 	bl	8002caa <LL_ADC_IsEnabled>
 8002da8:	4604      	mov	r4, r0
 8002daa:	4823      	ldr	r0, [pc, #140]	@ (8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002dac:	f7ff ff7d 	bl	8002caa <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4323      	orrs	r3, r4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d133      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dc0:	f023 030f 	bic.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	6811      	ldr	r1, [r2, #0]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd4:	e024      	b.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002de6:	f7ff ff60 	bl	8002caa <LL_ADC_IsEnabled>
 8002dea:	4604      	mov	r4, r0
 8002dec:	4812      	ldr	r0, [pc, #72]	@ (8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002dee:	f7ff ff5c 	bl	8002caa <LL_ADC_IsEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4323      	orrs	r3, r4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d112      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e02:	f023 030f 	bic.w	r3, r3, #15
 8002e06:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e08:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e0a:	e009      	b.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e1e:	e000      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3784      	adds	r7, #132	@ 0x84
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}
 8002e36:	bf00      	nop
 8002e38:	50000100 	.word	0x50000100
 8002e3c:	50000300 	.word	0x50000300

08002e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	60d3      	str	r3, [r2, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	f003 0307 	and.w	r3, r3, #7
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db0a      	blt.n	8002ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	490c      	ldr	r1, [pc, #48]	@ (8002ef0 <__NVIC_SetPriority+0x4c>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4908      	ldr	r1, [pc, #32]	@ (8002ef4 <__NVIC_SetPriority+0x50>)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3b04      	subs	r3, #4
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	761a      	strb	r2, [r3, #24]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	@ 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf28      	it	cs
 8002f16:	2304      	movcs	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d902      	bls.n	8002f28 <NVIC_EncodePriority+0x30>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3b03      	subs	r3, #3
 8002f26:	e000      	b.n	8002f2a <NVIC_EncodePriority+0x32>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43d9      	mvns	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	4313      	orrs	r3, r2
         );
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	@ 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f70:	d301      	bcc.n	8002f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00f      	b.n	8002f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f76:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f84:	f7ff ff8e 	bl	8002ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff47 	bl	8002e40 <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc8:	f7ff ff5e 	bl	8002e88 <__NVIC_GetPriorityGrouping>
 8002fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	6978      	ldr	r0, [r7, #20]
 8002fd4:	f7ff ff90 	bl	8002ef8 <NVIC_EncodePriority>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff5f 	bl	8002ea4 <__NVIC_SetPriority>
}
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffb2 	bl	8002f60 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003016:	e15a      	b.n	80032ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 814c 	beq.w	80032c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d005      	beq.n	8003048 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003044:	2b02      	cmp	r3, #2
 8003046:	d130      	bne.n	80030aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800307e:	2201      	movs	r2, #1
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 0201 	and.w	r2, r3, #1
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d017      	beq.n	80030e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d123      	bne.n	800313a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	08da      	lsrs	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3208      	adds	r2, #8
 80030fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	6939      	ldr	r1, [r7, #16]
 8003136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0203 	and.w	r2, r3, #3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80a6 	beq.w	80032c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317c:	4b5b      	ldr	r3, [pc, #364]	@ (80032ec <HAL_GPIO_Init+0x2e4>)
 800317e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003180:	4a5a      	ldr	r2, [pc, #360]	@ (80032ec <HAL_GPIO_Init+0x2e4>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6613      	str	r3, [r2, #96]	@ 0x60
 8003188:	4b58      	ldr	r3, [pc, #352]	@ (80032ec <HAL_GPIO_Init+0x2e4>)
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003194:	4a56      	ldr	r2, [pc, #344]	@ (80032f0 <HAL_GPIO_Init+0x2e8>)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	3302      	adds	r3, #2
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	220f      	movs	r2, #15
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031be:	d01f      	beq.n	8003200 <HAL_GPIO_Init+0x1f8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a4c      	ldr	r2, [pc, #304]	@ (80032f4 <HAL_GPIO_Init+0x2ec>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d019      	beq.n	80031fc <HAL_GPIO_Init+0x1f4>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a4b      	ldr	r2, [pc, #300]	@ (80032f8 <HAL_GPIO_Init+0x2f0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <HAL_GPIO_Init+0x1f0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a4a      	ldr	r2, [pc, #296]	@ (80032fc <HAL_GPIO_Init+0x2f4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00d      	beq.n	80031f4 <HAL_GPIO_Init+0x1ec>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a49      	ldr	r2, [pc, #292]	@ (8003300 <HAL_GPIO_Init+0x2f8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <HAL_GPIO_Init+0x1e8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a48      	ldr	r2, [pc, #288]	@ (8003304 <HAL_GPIO_Init+0x2fc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_GPIO_Init+0x1e4>
 80031e8:	2305      	movs	r3, #5
 80031ea:	e00a      	b.n	8003202 <HAL_GPIO_Init+0x1fa>
 80031ec:	2306      	movs	r3, #6
 80031ee:	e008      	b.n	8003202 <HAL_GPIO_Init+0x1fa>
 80031f0:	2304      	movs	r3, #4
 80031f2:	e006      	b.n	8003202 <HAL_GPIO_Init+0x1fa>
 80031f4:	2303      	movs	r3, #3
 80031f6:	e004      	b.n	8003202 <HAL_GPIO_Init+0x1fa>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e002      	b.n	8003202 <HAL_GPIO_Init+0x1fa>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_GPIO_Init+0x1fa>
 8003200:	2300      	movs	r3, #0
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	f002 0203 	and.w	r2, r2, #3
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	4093      	lsls	r3, r2
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003212:	4937      	ldr	r1, [pc, #220]	@ (80032f0 <HAL_GPIO_Init+0x2e8>)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	3302      	adds	r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003220:	4b39      	ldr	r3, [pc, #228]	@ (8003308 <HAL_GPIO_Init+0x300>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43db      	mvns	r3, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003244:	4a30      	ldr	r2, [pc, #192]	@ (8003308 <HAL_GPIO_Init+0x300>)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800324a:	4b2f      	ldr	r3, [pc, #188]	@ (8003308 <HAL_GPIO_Init+0x300>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800326e:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <HAL_GPIO_Init+0x300>)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003274:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_GPIO_Init+0x300>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003298:	4a1b      	ldr	r2, [pc, #108]	@ (8003308 <HAL_GPIO_Init+0x300>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <HAL_GPIO_Init+0x300>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032c2:	4a11      	ldr	r2, [pc, #68]	@ (8003308 <HAL_GPIO_Init+0x300>)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3301      	adds	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f47f ae9d 	bne.w	8003018 <HAL_GPIO_Init+0x10>
  }
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40010000 	.word	0x40010000
 80032f4:	48000400 	.word	0x48000400
 80032f8:	48000800 	.word	0x48000800
 80032fc:	48000c00 	.word	0x48000c00
 8003300:	48001000 	.word	0x48001000
 8003304:	48001400 	.word	0x48001400
 8003308:	40010400 	.word	0x40010400

0800330c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	e001      	b.n	800332e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
 8003348:	4613      	mov	r3, r2
 800334a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800334c:	787b      	ldrb	r3, [r7, #1]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003358:	e002      	b.n	8003360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d141      	bne.n	80033fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800337a:	4b4b      	ldr	r3, [pc, #300]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003386:	d131      	bne.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003388:	4b47      	ldr	r3, [pc, #284]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800338e:	4a46      	ldr	r2, [pc, #280]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003394:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003398:	4b43      	ldr	r3, [pc, #268]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033a0:	4a41      	ldr	r2, [pc, #260]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033a8:	4b40      	ldr	r3, [pc, #256]	@ (80034ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2232      	movs	r2, #50	@ 0x32
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	4a3f      	ldr	r2, [pc, #252]	@ (80034b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	3301      	adds	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033be:	e002      	b.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c6:	4b38      	ldr	r3, [pc, #224]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d2:	d102      	bne.n	80033da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f2      	bne.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033da:	4b33      	ldr	r3, [pc, #204]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e6:	d158      	bne.n	800349a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e057      	b.n	800349c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033ec:	4b2e      	ldr	r3, [pc, #184]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033f2:	4a2d      	ldr	r2, [pc, #180]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033fc:	e04d      	b.n	800349a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003404:	d141      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003406:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003412:	d131      	bne.n	8003478 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003414:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800341a:	4a23      	ldr	r2, [pc, #140]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003420:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003424:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800342c:	4a1e      	ldr	r2, [pc, #120]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003432:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003434:	4b1d      	ldr	r3, [pc, #116]	@ (80034ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2232      	movs	r2, #50	@ 0x32
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	0c9b      	lsrs	r3, r3, #18
 8003446:	3301      	adds	r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800344a:	e002      	b.n	8003452 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3b01      	subs	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003452:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345e:	d102      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f2      	bne.n	800344c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003466:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003472:	d112      	bne.n	800349a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e011      	b.n	800349c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003478:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800347e:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003484:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003488:	e007      	b.n	800349a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800348a:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003492:	4a05      	ldr	r2, [pc, #20]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003494:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003498:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40007000 	.word	0x40007000
 80034ac:	20000010 	.word	0x20000010
 80034b0:	431bde83 	.word	0x431bde83

080034b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a04      	ldr	r2, [pc, #16]	@ (80034d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034c2:	6093      	str	r3, [r2, #8]
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40007000 	.word	0x40007000

080034d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e2fe      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d075      	beq.n	80035de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f2:	4b97      	ldr	r3, [pc, #604]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034fc:	4b94      	ldr	r3, [pc, #592]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	d102      	bne.n	8003512 <HAL_RCC_OscConfig+0x3e>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d002      	beq.n	8003518 <HAL_RCC_OscConfig+0x44>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d10b      	bne.n	8003530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	4b8d      	ldr	r3, [pc, #564]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d05b      	beq.n	80035dc <HAL_RCC_OscConfig+0x108>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d157      	bne.n	80035dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e2d9      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003538:	d106      	bne.n	8003548 <HAL_RCC_OscConfig+0x74>
 800353a:	4b85      	ldr	r3, [pc, #532]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a84      	ldr	r2, [pc, #528]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e01d      	b.n	8003584 <HAL_RCC_OscConfig+0xb0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x98>
 8003552:	4b7f      	ldr	r3, [pc, #508]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7e      	ldr	r2, [pc, #504]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b7c      	ldr	r3, [pc, #496]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7b      	ldr	r2, [pc, #492]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0xb0>
 800356c:	4b78      	ldr	r3, [pc, #480]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a77      	ldr	r2, [pc, #476]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b75      	ldr	r3, [pc, #468]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a74      	ldr	r2, [pc, #464]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd fffa 	bl	8001584 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fd fff6 	bl	8001584 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e29e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0xc0>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd ffe6 	bl	8001584 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fd ffe2 	bl	8001584 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	@ 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e28a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ce:	4b60      	ldr	r3, [pc, #384]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0xe8>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d075      	beq.n	80036d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ea:	4b59      	ldr	r3, [pc, #356]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f4:	4b56      	ldr	r3, [pc, #344]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d102      	bne.n	800360a <HAL_RCC_OscConfig+0x136>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d002      	beq.n	8003610 <HAL_RCC_OscConfig+0x13c>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b04      	cmp	r3, #4
 800360e:	d11f      	bne.n	8003650 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003610:	4b4f      	ldr	r3, [pc, #316]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_OscConfig+0x154>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e25d      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b49      	ldr	r3, [pc, #292]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	4946      	ldr	r1, [pc, #280]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800363c:	4b45      	ldr	r3, [pc, #276]	@ (8003754 <HAL_RCC_OscConfig+0x280>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd ff53 	bl	80014ec <HAL_InitTick>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d043      	beq.n	80036d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e249      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d023      	beq.n	80036a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003658:	4b3d      	ldr	r3, [pc, #244]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a3c      	ldr	r2, [pc, #240]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd ff8e 	bl	8001584 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366c:	f7fd ff8a 	bl	8001584 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e232      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367e:	4b34      	ldr	r3, [pc, #208]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368a:	4b31      	ldr	r3, [pc, #196]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	492d      	ldr	r1, [pc, #180]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
 800369e:	e01a      	b.n	80036d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80036a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd ff6a 	bl	8001584 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fd ff66 	bl	8001584 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e20e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c6:	4b22      	ldr	r3, [pc, #136]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1e0>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d041      	beq.n	8003766 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01c      	beq.n	8003724 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f0:	4a17      	ldr	r2, [pc, #92]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fd ff43 	bl	8001584 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7fd ff3f 	bl	8001584 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1e7      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003714:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ef      	beq.n	8003702 <HAL_RCC_OscConfig+0x22e>
 8003722:	e020      	b.n	8003766 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003724:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372a:	4a09      	ldr	r2, [pc, #36]	@ (8003750 <HAL_RCC_OscConfig+0x27c>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fd ff26 	bl	8001584 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800373a:	e00d      	b.n	8003758 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fd ff22 	bl	8001584 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d906      	bls.n	8003758 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1ca      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003758:	4b8c      	ldr	r3, [pc, #560]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ea      	bne.n	800373c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80a6 	beq.w	80038c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003778:	4b84      	ldr	r3, [pc, #528]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_OscConfig+0x2b4>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x2b6>
 8003788:	2300      	movs	r3, #0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	4b7f      	ldr	r3, [pc, #508]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	4a7e      	ldr	r2, [pc, #504]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003798:	6593      	str	r3, [r2, #88]	@ 0x58
 800379a:	4b7c      	ldr	r3, [pc, #496]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037a6:	2301      	movs	r3, #1
 80037a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037aa:	4b79      	ldr	r3, [pc, #484]	@ (8003990 <HAL_RCC_OscConfig+0x4bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d118      	bne.n	80037e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b6:	4b76      	ldr	r3, [pc, #472]	@ (8003990 <HAL_RCC_OscConfig+0x4bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a75      	ldr	r2, [pc, #468]	@ (8003990 <HAL_RCC_OscConfig+0x4bc>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c2:	f7fd fedf 	bl	8001584 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ca:	f7fd fedb 	bl	8001584 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e183      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003990 <HAL_RCC_OscConfig+0x4bc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_RCC_OscConfig+0x32e>
 80037f0:	4b66      	ldr	r3, [pc, #408]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f6:	4a65      	ldr	r2, [pc, #404]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003800:	e024      	b.n	800384c <HAL_RCC_OscConfig+0x378>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d110      	bne.n	800382c <HAL_RCC_OscConfig+0x358>
 800380a:	4b60      	ldr	r3, [pc, #384]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	4a5e      	ldr	r2, [pc, #376]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f043 0304 	orr.w	r3, r3, #4
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800381a:	4b5c      	ldr	r3, [pc, #368]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003820:	4a5a      	ldr	r2, [pc, #360]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800382a:	e00f      	b.n	800384c <HAL_RCC_OscConfig+0x378>
 800382c:	4b57      	ldr	r3, [pc, #348]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	4a56      	ldr	r2, [pc, #344]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800383c:	4b53      	ldr	r3, [pc, #332]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003842:	4a52      	ldr	r2, [pc, #328]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d016      	beq.n	8003882 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd fe96 	bl	8001584 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fd fe92 	bl	8001584 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e138      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003872:	4b46      	ldr	r3, [pc, #280]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ed      	beq.n	800385c <HAL_RCC_OscConfig+0x388>
 8003880:	e015      	b.n	80038ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fd fe7f 	bl	8001584 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fe7b 	bl	8001584 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e121      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a0:	4b3a      	ldr	r3, [pc, #232]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ed      	bne.n	800388a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b35      	ldr	r3, [pc, #212]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	4a34      	ldr	r2, [pc, #208]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03c      	beq.n	8003946 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01c      	beq.n	800390e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038d4:	4b2d      	ldr	r3, [pc, #180]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 80038d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038da:	4a2c      	ldr	r2, [pc, #176]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fe4e 	bl	8001584 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ec:	f7fd fe4a 	bl	8001584 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e0f2      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fe:	4b23      	ldr	r3, [pc, #140]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <HAL_RCC_OscConfig+0x418>
 800390c:	e01b      	b.n	8003946 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800390e:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003914:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fd fe31 	bl	8001584 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003926:	f7fd fe2d 	bl	8001584 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0d5      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003938:	4b14      	ldr	r3, [pc, #80]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800393a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ef      	bne.n	8003926 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80c9 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003950:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b0c      	cmp	r3, #12
 800395a:	f000 8083 	beq.w	8003a64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d15e      	bne.n	8003a24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a08      	ldr	r2, [pc, #32]	@ (800398c <HAL_RCC_OscConfig+0x4b8>)
 800396c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd fe07 	bl	8001584 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003978:	e00c      	b.n	8003994 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7fd fe03 	bl	8001584 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d905      	bls.n	8003994 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0ab      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
 800398c:	40021000 	.word	0x40021000
 8003990:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003994:	4b55      	ldr	r3, [pc, #340]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ec      	bne.n	800397a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a0:	4b52      	ldr	r3, [pc, #328]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4b52      	ldr	r3, [pc, #328]	@ (8003af0 <HAL_RCC_OscConfig+0x61c>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6a11      	ldr	r1, [r2, #32]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039b0:	3a01      	subs	r2, #1
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	4311      	orrs	r1, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80039ba:	0212      	lsls	r2, r2, #8
 80039bc:	4311      	orrs	r1, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039c2:	0852      	lsrs	r2, r2, #1
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0552      	lsls	r2, r2, #21
 80039c8:	4311      	orrs	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039ce:	0852      	lsrs	r2, r2, #1
 80039d0:	3a01      	subs	r2, #1
 80039d2:	0652      	lsls	r2, r2, #25
 80039d4:	4311      	orrs	r1, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039da:	06d2      	lsls	r2, r2, #27
 80039dc:	430a      	orrs	r2, r1
 80039de:	4943      	ldr	r1, [pc, #268]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e4:	4b41      	ldr	r3, [pc, #260]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a40      	ldr	r2, [pc, #256]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 80039ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039f0:	4b3e      	ldr	r3, [pc, #248]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a3d      	ldr	r2, [pc, #244]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 80039f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd fdc2 	bl	8001584 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fd fdbe 	bl	8001584 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e066      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b35      	ldr	r3, [pc, #212]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x530>
 8003a22:	e05e      	b.n	8003ae2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b31      	ldr	r3, [pc, #196]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a30      	ldr	r2, [pc, #192]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 8003a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fda8 	bl	8001584 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fd fda4 	bl	8001584 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e04c      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4a:	4b28      	ldr	r3, [pc, #160]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a56:	4b25      	ldr	r3, [pc, #148]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	4924      	ldr	r1, [pc, #144]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 8003a5c:	4b25      	ldr	r3, [pc, #148]	@ (8003af4 <HAL_RCC_OscConfig+0x620>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60cb      	str	r3, [r1, #12]
 8003a62:	e03e      	b.n	8003ae2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e039      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <HAL_RCC_OscConfig+0x618>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0203 	and.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d12c      	bne.n	8003ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d123      	bne.n	8003ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d11b      	bne.n	8003ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d113      	bne.n	8003ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	019f800c 	.word	0x019f800c
 8003af4:	feeefffc 	.word	0xfeeefffc

08003af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e11e      	b.n	8003d4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b10:	4b91      	ldr	r3, [pc, #580]	@ (8003d58 <HAL_RCC_ClockConfig+0x260>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d910      	bls.n	8003b40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b8e      	ldr	r3, [pc, #568]	@ (8003d58 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 020f 	bic.w	r2, r3, #15
 8003b26:	498c      	ldr	r1, [pc, #560]	@ (8003d58 <HAL_RCC_ClockConfig+0x260>)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b8a      	ldr	r3, [pc, #552]	@ (8003d58 <HAL_RCC_ClockConfig+0x260>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e106      	b.n	8003d4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d073      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d129      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b54:	4b81      	ldr	r3, [pc, #516]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0f4      	b.n	8003d4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b64:	f000 f966 	bl	8003e34 <RCC_GetSysClockFreqFromPLLSource>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4a7c      	ldr	r2, [pc, #496]	@ (8003d60 <HAL_RCC_ClockConfig+0x268>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d93f      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b72:	4b7a      	ldr	r3, [pc, #488]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d033      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d12f      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b92:	4b72      	ldr	r3, [pc, #456]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b9a:	4a70      	ldr	r2, [pc, #448]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ba2:	2380      	movs	r3, #128	@ 0x80
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e024      	b.n	8003bf2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0c6      	b.n	8003d4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc0:	4b66      	ldr	r3, [pc, #408]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0be      	b.n	8003d4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bd0:	f000 f8ce 	bl	8003d70 <HAL_RCC_GetSysClockFreq>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4a61      	ldr	r2, [pc, #388]	@ (8003d60 <HAL_RCC_ClockConfig+0x268>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d909      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bde:	4b5f      	ldr	r3, [pc, #380]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003be6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bee:	2380      	movs	r3, #128	@ 0x80
 8003bf0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4957      	ldr	r1, [pc, #348]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c04:	f7fd fcbe 	bl	8001584 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fd fcba 	bl	8001584 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e095      	b.n	8003d4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b4e      	ldr	r3, [pc, #312]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c4c:	4b43      	ldr	r3, [pc, #268]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a42      	ldr	r2, [pc, #264]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c64:	4b3d      	ldr	r3, [pc, #244]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4936      	ldr	r1, [pc, #216]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b80      	cmp	r3, #128	@ 0x80
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c8e:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	4a32      	ldr	r2, [pc, #200]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003c94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d58 <HAL_RCC_ClockConfig+0x260>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d21d      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 020f 	bic.w	r2, r3, #15
 8003cb0:	4929      	ldr	r1, [pc, #164]	@ (8003d58 <HAL_RCC_ClockConfig+0x260>)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cb8:	f7fd fc64 	bl	8001584 <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fd fc60 	bl	8001584 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e03b      	b.n	8003d4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	@ (8003d58 <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1ed      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4917      	ldr	r1, [pc, #92]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0e:	4b13      	ldr	r3, [pc, #76]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	490f      	ldr	r1, [pc, #60]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d22:	f000 f825 	bl	8003d70 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490c      	ldr	r1, [pc, #48]	@ (8003d64 <HAL_RCC_ClockConfig+0x26c>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d68 <HAL_RCC_ClockConfig+0x270>)
 8003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d42:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <HAL_RCC_ClockConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd fbd0 	bl	80014ec <HAL_InitTick>
 8003d4c:	4603      	mov	r3, r0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	04c4b400 	.word	0x04c4b400
 8003d64:	08004310 	.word	0x08004310
 8003d68:	20000010 	.word	0x20000010
 8003d6c:	20000014 	.word	0x20000014

08003d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d76:	4b2c      	ldr	r3, [pc, #176]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d102      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d82:	4b2a      	ldr	r3, [pc, #168]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	e047      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d88:	4b27      	ldr	r3, [pc, #156]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d102      	bne.n	8003d9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d94:	4b26      	ldr	r3, [pc, #152]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	e03e      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d9a:	4b23      	ldr	r3, [pc, #140]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d136      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003da6:	4b20      	ldr	r3, [pc, #128]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003db0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3301      	adds	r3, #1
 8003dbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	4a16      	ldr	r2, [pc, #88]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dce:	68d2      	ldr	r2, [r2, #12]
 8003dd0:	0a12      	lsrs	r2, r2, #8
 8003dd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	617b      	str	r3, [r7, #20]
      break;
 8003ddc:	e00c      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dde:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	4a10      	ldr	r2, [pc, #64]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de8:	68d2      	ldr	r2, [r2, #12]
 8003dea:	0a12      	lsrs	r2, r2, #8
 8003dec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003df0:	fb02 f303 	mul.w	r3, r2, r3
 8003df4:	617b      	str	r3, [r7, #20]
      break;
 8003df6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003df8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0e5b      	lsrs	r3, r3, #25
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	3301      	adds	r3, #1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e001      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e18:	693b      	ldr	r3, [r7, #16]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	00f42400 	.word	0x00f42400
 8003e30:	016e3600 	.word	0x016e3600

08003e34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e44:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d10c      	bne.n	8003e72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e58:	4a17      	ldr	r2, [pc, #92]	@ (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e62:	68d2      	ldr	r2, [r2, #12]
 8003e64:	0a12      	lsrs	r2, r2, #8
 8003e66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	617b      	str	r3, [r7, #20]
    break;
 8003e70:	e00c      	b.n	8003e8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e72:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7c:	68d2      	ldr	r2, [r2, #12]
 8003e7e:	0a12      	lsrs	r2, r2, #8
 8003e80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
    break;
 8003e8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0e5b      	lsrs	r3, r3, #25
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ea6:	687b      	ldr	r3, [r7, #4]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	016e3600 	.word	0x016e3600
 8003ebc:	00f42400 	.word	0x00f42400

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8098 	beq.w	800400e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee2:	4b43      	ldr	r3, [pc, #268]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10d      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	4b40      	ldr	r3, [pc, #256]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efa:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a39      	ldr	r2, [pc, #228]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f16:	f7fd fb35 	bl	8001584 <HAL_GetTick>
 8003f1a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f1c:	e009      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1e:	f7fd fb31 	bl	8001584 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d902      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f30:	e005      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f32:	4b30      	ldr	r3, [pc, #192]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ef      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d159      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01e      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d019      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f60:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f6c:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f8c:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fd faf1 	bl	8001584 <HAL_GetTick>
 8003fa2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa4:	e00b      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fd faed 	bl	8001584 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d902      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	74fb      	strb	r3, [r7, #19]
            break;
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ec      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd2:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	4903      	ldr	r1, [pc, #12]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fe8:	e008      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	74bb      	strb	r3, [r7, #18]
 8003fee:	e005      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ffc:	7c7b      	ldrb	r3, [r7, #17]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4ba6      	ldr	r3, [pc, #664]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004006:	4aa5      	ldr	r2, [pc, #660]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800401a:	4ba0      	ldr	r3, [pc, #640]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f023 0203 	bic.w	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	499c      	ldr	r1, [pc, #624]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403c:	4b97      	ldr	r3, [pc, #604]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004042:	f023 020c 	bic.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4994      	ldr	r1, [pc, #592]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800405e:	4b8f      	ldr	r3, [pc, #572]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004064:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	498b      	ldr	r1, [pc, #556]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004080:	4b86      	ldr	r3, [pc, #536]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	4983      	ldr	r1, [pc, #524]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a2:	4b7e      	ldr	r3, [pc, #504]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	497a      	ldr	r1, [pc, #488]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c4:	4b75      	ldr	r3, [pc, #468]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	4972      	ldr	r1, [pc, #456]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e6:	4b6d      	ldr	r3, [pc, #436]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	4969      	ldr	r1, [pc, #420]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004108:	4b64      	ldr	r3, [pc, #400]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	4961      	ldr	r1, [pc, #388]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800412a:	4b5c      	ldr	r3, [pc, #368]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004130:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	4958      	ldr	r1, [pc, #352]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800414c:	4b53      	ldr	r3, [pc, #332]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	4950      	ldr	r1, [pc, #320]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416c:	4b4b      	ldr	r3, [pc, #300]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a4a      	ldr	r2, [pc, #296]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004176:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004180:	2b00      	cmp	r3, #0
 8004182:	d015      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004184:	4b45      	ldr	r3, [pc, #276]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	4942      	ldr	r1, [pc, #264]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4b3d      	ldr	r3, [pc, #244]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a3c      	ldr	r2, [pc, #240]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041bc:	4b37      	ldr	r3, [pc, #220]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	4934      	ldr	r1, [pc, #208]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041da:	d105      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041dc:	4b2f      	ldr	r3, [pc, #188]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a2e      	ldr	r2, [pc, #184]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041f4:	4b29      	ldr	r3, [pc, #164]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004202:	4926      	ldr	r1, [pc, #152]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b21      	ldr	r3, [pc, #132]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a20      	ldr	r2, [pc, #128]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800422c:	4b1b      	ldr	r3, [pc, #108]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004232:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423a:	4918      	ldr	r1, [pc, #96]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800424c:	4b13      	ldr	r3, [pc, #76]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a12      	ldr	r2, [pc, #72]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004256:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004264:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004272:	490a      	ldr	r1, [pc, #40]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004282:	d105      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004284:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a04      	ldr	r2, [pc, #16]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004290:	7cbb      	ldrb	r3, [r7, #18]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000

080042a0 <memset>:
 80042a0:	4402      	add	r2, r0
 80042a2:	4603      	mov	r3, r0
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d100      	bne.n	80042aa <memset+0xa>
 80042a8:	4770      	bx	lr
 80042aa:	f803 1b01 	strb.w	r1, [r3], #1
 80042ae:	e7f9      	b.n	80042a4 <memset+0x4>

080042b0 <__libc_init_array>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	4d0d      	ldr	r5, [pc, #52]	@ (80042e8 <__libc_init_array+0x38>)
 80042b4:	4c0d      	ldr	r4, [pc, #52]	@ (80042ec <__libc_init_array+0x3c>)
 80042b6:	1b64      	subs	r4, r4, r5
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	2600      	movs	r6, #0
 80042bc:	42a6      	cmp	r6, r4
 80042be:	d109      	bne.n	80042d4 <__libc_init_array+0x24>
 80042c0:	4d0b      	ldr	r5, [pc, #44]	@ (80042f0 <__libc_init_array+0x40>)
 80042c2:	4c0c      	ldr	r4, [pc, #48]	@ (80042f4 <__libc_init_array+0x44>)
 80042c4:	f000 f818 	bl	80042f8 <_init>
 80042c8:	1b64      	subs	r4, r4, r5
 80042ca:	10a4      	asrs	r4, r4, #2
 80042cc:	2600      	movs	r6, #0
 80042ce:	42a6      	cmp	r6, r4
 80042d0:	d105      	bne.n	80042de <__libc_init_array+0x2e>
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d8:	4798      	blx	r3
 80042da:	3601      	adds	r6, #1
 80042dc:	e7ee      	b.n	80042bc <__libc_init_array+0xc>
 80042de:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e2:	4798      	blx	r3
 80042e4:	3601      	adds	r6, #1
 80042e6:	e7f2      	b.n	80042ce <__libc_init_array+0x1e>
 80042e8:	08004320 	.word	0x08004320
 80042ec:	08004320 	.word	0x08004320
 80042f0:	08004320 	.word	0x08004320
 80042f4:	08004324 	.word	0x08004324

080042f8 <_init>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr

08004304 <_fini>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	bf00      	nop
 8004308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430a:	bc08      	pop	{r3}
 800430c:	469e      	mov	lr, r3
 800430e:	4770      	bx	lr
