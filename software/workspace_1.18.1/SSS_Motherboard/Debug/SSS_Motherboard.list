
SSS_Motherboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002064  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800223c  0800223c  0000323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800224c  0800224c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800224c  0800224c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800224c  0800224c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800224c  0800224c  0000324c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002250  08002250  00003250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002254  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002260  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002260  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0be  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d6  00000000  00000000  0000e0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0000f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000927  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7bb  00000000  00000000  00010dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b62c  00000000  00000000  0002d592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bba9b  00000000  00000000  00038bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  000f469c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000f7860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002224 	.word	0x08002224

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002224 	.word	0x08002224

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9bd 	bl	800059a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f806 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f89a 	bl	800035c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000228:	f000 f842 	bl	80002b0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x14>

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b094      	sub	sp, #80	@ 0x50
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2238      	movs	r2, #56	@ 0x38
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f001 ffc4 	bl	80021cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000252:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000256:	f000 fc8f 	bl	8000b78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000262:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2340      	movs	r3, #64	@ 0x40
 8000266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000268:	2300      	movs	r3, #0
 800026a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fd35 	bl	8000ce0 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800027c:	f000 f8b8 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000284:	2301      	movs	r3, #1
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f001 f833 	bl	8001304 <HAL_RCC_ClockConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002a4:	f000 f8a4 	bl	80003f0 <Error_Handler>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3750      	adds	r7, #80	@ 0x50
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	@ 0x28
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b6:	f107 031c 	add.w	r3, r7, #28
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c2:	463b      	mov	r3, r7
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
 80002d0:	615a      	str	r2, [r3, #20]
 80002d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002d4:	4b20      	ldr	r3, [pc, #128]	@ (8000358 <MX_TIM2_Init+0xa8>)
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <MX_TIM2_Init+0xa8>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <MX_TIM2_Init+0xa8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <MX_TIM2_Init+0xa8>)
 80002ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80002ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f0:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <MX_TIM2_Init+0xa8>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f6:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <MX_TIM2_Init+0xa8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002fc:	4816      	ldr	r0, [pc, #88]	@ (8000358 <MX_TIM2_Init+0xa8>)
 80002fe:	f001 f9e5 	bl	80016cc <HAL_TIM_PWM_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000308:	f000 f872 	bl	80003f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000314:	f107 031c 	add.w	r3, r7, #28
 8000318:	4619      	mov	r1, r3
 800031a:	480f      	ldr	r0, [pc, #60]	@ (8000358 <MX_TIM2_Init+0xa8>)
 800031c:	f001 fed4 	bl	80020c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000326:	f000 f863 	bl	80003f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800032a:	2360      	movs	r3, #96	@ 0x60
 800032c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800033a:	463b      	mov	r3, r7
 800033c:	2200      	movs	r2, #0
 800033e:	4619      	mov	r1, r3
 8000340:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_TIM2_Init+0xa8>)
 8000342:	f001 fa1b 	bl	800177c <HAL_TIM_PWM_ConfigChannel>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800034c:	f000 f850 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	3728      	adds	r7, #40	@ 0x28
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000372:	4b1d      	ldr	r3, [pc, #116]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000376:	4a1c      	ldr	r2, [pc, #112]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000378:	f043 0320 	orr.w	r3, r3, #32
 800037c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800037e:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000382:	f003 0320 	and.w	r3, r3, #32
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038e:	4a16      	ldr	r2, [pc, #88]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	4a10      	ldr	r2, [pc, #64]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 80003a8:	f043 0302 	orr.w	r3, r3, #2
 80003ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	f003 0302 	and.w	r3, r3, #2
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2130      	movs	r1, #48	@ 0x30
 80003be:	480b      	ldr	r0, [pc, #44]	@ (80003ec <MX_GPIO_Init+0x90>)
 80003c0:	f000 fbc2 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80003c4:	2330      	movs	r3, #48	@ 0x30
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d4:	f107 030c 	add.w	r3, r7, #12
 80003d8:	4619      	mov	r1, r3
 80003da:	4804      	ldr	r0, [pc, #16]	@ (80003ec <MX_GPIO_Init+0x90>)
 80003dc:	f000 fa32 	bl	8000844 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48000400 	.word	0x48000400

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <HAL_MspInit+0x44>)
 8000404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6613      	str	r3, [r2, #96]	@ 0x60
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_MspInit+0x44>)
 8000410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <HAL_MspInit+0x44>)
 800041c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	6593      	str	r3, [r2, #88]	@ 0x58
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <HAL_MspInit+0x44>)
 8000428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000432:	f000 fc45 	bl	8000cc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000464:	d128      	bne.n	80004b8 <HAL_TIM_PWM_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000466:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800046a:	4a15      	ldr	r2, [pc, #84]	@ (80004c0 <HAL_TIM_PWM_MspInit+0x7c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6593      	str	r3, [r2, #88]	@ 0x58
 8000472:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800048a:	4b0d      	ldr	r3, [pc, #52]	@ (80004c0 <HAL_TIM_PWM_MspInit+0x7c>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000496:	2303      	movs	r3, #3
 8000498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049a:	2302      	movs	r3, #2
 800049c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2300      	movs	r3, #0
 80004a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004a6:	2301      	movs	r3, #1
 80004a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b4:	f000 f9c6 	bl	8000844 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80004b8:	bf00      	nop
 80004ba:	3728      	adds	r7, #40	@ 0x28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <NMI_Handler+0x4>

080004cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <MemManage_Handler+0x4>

080004dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051a:	f000 f891 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <SystemInit+0x20>)
 800052a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800052e:	4a05      	ldr	r2, [pc, #20]	@ (8000544 <SystemInit+0x20>)
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000534:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000548:	480d      	ldr	r0, [pc, #52]	@ (8000580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800054c:	f7ff ffea 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000550:	480c      	ldr	r0, [pc, #48]	@ (8000584 <LoopForever+0x6>)
  ldr r1, =_edata
 8000552:	490d      	ldr	r1, [pc, #52]	@ (8000588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000554:	4a0d      	ldr	r2, [pc, #52]	@ (800058c <LoopForever+0xe>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000568:	4c0a      	ldr	r4, [pc, #40]	@ (8000594 <LoopForever+0x16>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000576:	f001 fe31 	bl	80021dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800057a:	f7ff fe4d 	bl	8000218 <main>

0800057e <LoopForever>:

LoopForever:
    b LoopForever
 800057e:	e7fe      	b.n	800057e <LoopForever>
  ldr   r0, =_estack
 8000580:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800058c:	08002254 	.word	0x08002254
  ldr r2, =_sbss
 8000590:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000594:	20000078 	.word	0x20000078

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>

0800059a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 f91b 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f80e 	bl	80005cc <HAL_InitTick>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	e001      	b.n	80005c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005bc:	f7ff ff1e 	bl	80003fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c0:	79fb      	ldrb	r3, [r7, #7]

}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <HAL_InitTick+0x68>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d022      	beq.n	8000626 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <HAL_InitTick+0x6c>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <HAL_InitTick+0x68>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80005f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f918 	bl	800082a <HAL_SYSTICK_Config>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10f      	bne.n	8000620 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b0f      	cmp	r3, #15
 8000604:	d809      	bhi.n	800061a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000606:	2200      	movs	r2, #0
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800060e:	f000 f8f2 	bl	80007f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <HAL_InitTick+0x70>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	e007      	b.n	800062a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e004      	b.n	800062a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e001      	b.n	800062a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000008 	.word	0x20000008
 8000638:	20000000 	.word	0x20000000
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_IncTick+0x1c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_IncTick+0x20>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4413      	add	r3, r2
 800064e:	4a03      	ldr	r2, [pc, #12]	@ (800065c <HAL_IncTick+0x1c>)
 8000650:	6013      	str	r3, [r2, #0]
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	20000074 	.word	0x20000074
 8000660:	20000008 	.word	0x20000008

08000664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <HAL_GetTick+0x14>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000074 	.word	0x20000074

0800067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c8:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <__NVIC_GetPriorityGrouping+0x18>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	f003 0307 	and.w	r3, r3, #7
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	@ (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	@ (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	@ 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	@ 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007ac:	d301      	bcc.n	80007b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00f      	b.n	80007d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b2:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <SysTick_Config+0x40>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ba:	210f      	movs	r1, #15
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007c0:	f7ff ff8e 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <SysTick_Config+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <SysTick_Config+0x40>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010

080007e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff47 	bl	800067c <__NVIC_SetPriorityGrouping>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5e 	bl	80006c4 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff90 	bl	8000734 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5f 	bl	80006e0 <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb2 	bl	800079c <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000852:	e15a      	b.n	8000b0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	fa01 f303 	lsl.w	r3, r1, r3
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 814c 	beq.w	8000b04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2b01      	cmp	r3, #1
 8000876:	d005      	beq.n	8000884 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000880:	2b02      	cmp	r3, #2
 8000882:	d130      	bne.n	80008e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ba:	2201      	movs	r2, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	091b      	lsrs	r3, r3, #4
 80008d0:	f003 0201 	and.w	r2, r3, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d017      	beq.n	8000922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	2b02      	cmp	r3, #2
 800092c:	d123      	bne.n	8000976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	691a      	ldr	r2, [r3, #16]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f003 0307 	and.w	r3, r3, #7
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	08da      	lsrs	r2, r3, #3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3208      	adds	r2, #8
 8000970:	6939      	ldr	r1, [r7, #16]
 8000972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0203 	and.w	r2, r3, #3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 80a6 	beq.w	8000b04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000b28 <HAL_GPIO_Init+0x2e4>)
 80009ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009bc:	4a5a      	ldr	r2, [pc, #360]	@ (8000b28 <HAL_GPIO_Init+0x2e4>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <HAL_GPIO_Init+0x2e4>)
 80009c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d0:	4a56      	ldr	r2, [pc, #344]	@ (8000b2c <HAL_GPIO_Init+0x2e8>)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009fa:	d01f      	beq.n	8000a3c <HAL_GPIO_Init+0x1f8>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a4c      	ldr	r2, [pc, #304]	@ (8000b30 <HAL_GPIO_Init+0x2ec>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d019      	beq.n	8000a38 <HAL_GPIO_Init+0x1f4>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a4b      	ldr	r2, [pc, #300]	@ (8000b34 <HAL_GPIO_Init+0x2f0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d013      	beq.n	8000a34 <HAL_GPIO_Init+0x1f0>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b38 <HAL_GPIO_Init+0x2f4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d00d      	beq.n	8000a30 <HAL_GPIO_Init+0x1ec>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a49      	ldr	r2, [pc, #292]	@ (8000b3c <HAL_GPIO_Init+0x2f8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0x1e8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a48      	ldr	r2, [pc, #288]	@ (8000b40 <HAL_GPIO_Init+0x2fc>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d101      	bne.n	8000a28 <HAL_GPIO_Init+0x1e4>
 8000a24:	2305      	movs	r3, #5
 8000a26:	e00a      	b.n	8000a3e <HAL_GPIO_Init+0x1fa>
 8000a28:	2306      	movs	r3, #6
 8000a2a:	e008      	b.n	8000a3e <HAL_GPIO_Init+0x1fa>
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	e006      	b.n	8000a3e <HAL_GPIO_Init+0x1fa>
 8000a30:	2303      	movs	r3, #3
 8000a32:	e004      	b.n	8000a3e <HAL_GPIO_Init+0x1fa>
 8000a34:	2302      	movs	r3, #2
 8000a36:	e002      	b.n	8000a3e <HAL_GPIO_Init+0x1fa>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <HAL_GPIO_Init+0x1fa>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	f002 0203 	and.w	r2, r2, #3
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4e:	4937      	ldr	r1, [pc, #220]	@ (8000b2c <HAL_GPIO_Init+0x2e8>)
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	3302      	adds	r3, #2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a5c:	4b39      	ldr	r3, [pc, #228]	@ (8000b44 <HAL_GPIO_Init+0x300>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a80:	4a30      	ldr	r2, [pc, #192]	@ (8000b44 <HAL_GPIO_Init+0x300>)
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a86:	4b2f      	ldr	r3, [pc, #188]	@ (8000b44 <HAL_GPIO_Init+0x300>)
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aaa:	4a26      	ldr	r2, [pc, #152]	@ (8000b44 <HAL_GPIO_Init+0x300>)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ab0:	4b24      	ldr	r3, [pc, #144]	@ (8000b44 <HAL_GPIO_Init+0x300>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b44 <HAL_GPIO_Init+0x300>)
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <HAL_GPIO_Init+0x300>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000afe:	4a11      	ldr	r2, [pc, #68]	@ (8000b44 <HAL_GPIO_Init+0x300>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	3301      	adds	r3, #1
 8000b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	fa22 f303 	lsr.w	r3, r2, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f47f ae9d 	bne.w	8000854 <HAL_GPIO_Init+0x10>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	371c      	adds	r7, #28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000c00 	.word	0x48000c00
 8000b3c:	48001000 	.word	0x48001000
 8000b40:	48001400 	.word	0x48001400
 8000b44:	40010400 	.word	0x40010400

08000b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b58:	787b      	ldrb	r3, [r7, #1]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b64:	e002      	b.n	8000b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d141      	bne.n	8000c0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b86:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b92:	d131      	bne.n	8000bf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000b94:	4b47      	ldr	r3, [pc, #284]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b9a:	4a46      	ldr	r2, [pc, #280]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba4:	4b43      	ldr	r3, [pc, #268]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bac:	4a41      	ldr	r2, [pc, #260]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bb4:	4b40      	ldr	r3, [pc, #256]	@ (8000cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2232      	movs	r2, #50	@ 0x32
 8000bba:	fb02 f303 	mul.w	r3, r2, r3
 8000bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8000cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	0c9b      	lsrs	r3, r3, #18
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bca:	e002      	b.n	8000bd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd2:	4b38      	ldr	r3, [pc, #224]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bde:	d102      	bne.n	8000be6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f2      	bne.n	8000bcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000be6:	4b33      	ldr	r3, [pc, #204]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bf2:	d158      	bne.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e057      	b.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000c08:	e04d      	b.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c10:	d141      	bne.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c12:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c1e:	d131      	bne.n	8000c84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c20:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c26:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c30:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c38:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2232      	movs	r2, #50	@ 0x32
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	0c9b      	lsrs	r3, r3, #18
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c56:	e002      	b.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c6a:	d102      	bne.n	8000c72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f2      	bne.n	8000c58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c7e:	d112      	bne.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e011      	b.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000c94:	e007      	b.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c96:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40007000 	.word	0x40007000
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	431bde83 	.word	0x431bde83

08000cc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cce:	6093      	str	r3, [r2, #8]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e2fe      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d075      	beq.n	8000dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cfe:	4b97      	ldr	r3, [pc, #604]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d08:	4b94      	ldr	r3, [pc, #592]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	2b0c      	cmp	r3, #12
 8000d16:	d102      	bne.n	8000d1e <HAL_RCC_OscConfig+0x3e>
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d002      	beq.n	8000d24 <HAL_RCC_OscConfig+0x44>
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d10b      	bne.n	8000d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d24:	4b8d      	ldr	r3, [pc, #564]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d05b      	beq.n	8000de8 <HAL_RCC_OscConfig+0x108>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d157      	bne.n	8000de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e2d9      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d44:	d106      	bne.n	8000d54 <HAL_RCC_OscConfig+0x74>
 8000d46:	4b85      	ldr	r3, [pc, #532]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a84      	ldr	r2, [pc, #528]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e01d      	b.n	8000d90 <HAL_RCC_OscConfig+0xb0>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d5c:	d10c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x98>
 8000d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a7e      	ldr	r2, [pc, #504]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e00b      	b.n	8000d90 <HAL_RCC_OscConfig+0xb0>
 8000d78:	4b78      	ldr	r3, [pc, #480]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a77      	ldr	r2, [pc, #476]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4b75      	ldr	r3, [pc, #468]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a74      	ldr	r2, [pc, #464]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d013      	beq.n	8000dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc64 	bl	8000664 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fc60 	bl	8000664 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	@ 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e29e      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000db2:	4b6a      	ldr	r3, [pc, #424]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f0      	beq.n	8000da0 <HAL_RCC_OscConfig+0xc0>
 8000dbe:	e014      	b.n	8000dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fc50 	bl	8000664 <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fc4c 	bl	8000664 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	@ 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e28a      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dda:	4b60      	ldr	r3, [pc, #384]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0xe8>
 8000de6:	e000      	b.n	8000dea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d075      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df6:	4b59      	ldr	r3, [pc, #356]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e00:	4b56      	ldr	r3, [pc, #344]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d102      	bne.n	8000e16 <HAL_RCC_OscConfig+0x136>
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d002      	beq.n	8000e1c <HAL_RCC_OscConfig+0x13c>
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d11f      	bne.n	8000e5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <HAL_RCC_OscConfig+0x154>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e25d      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e34:	4b49      	ldr	r3, [pc, #292]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	061b      	lsls	r3, r3, #24
 8000e42:	4946      	ldr	r1, [pc, #280]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e48:	4b45      	ldr	r3, [pc, #276]	@ (8000f60 <HAL_RCC_OscConfig+0x280>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fbbd 	bl	80005cc <HAL_InitTick>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d043      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e249      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d023      	beq.n	8000eac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e64:	4b3d      	ldr	r3, [pc, #244]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a3c      	ldr	r2, [pc, #240]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e70:	f7ff fbf8 	bl	8000664 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e78:	f7ff fbf4 	bl	8000664 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e232      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e8a:	4b34      	ldr	r3, [pc, #208]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e96:	4b31      	ldr	r3, [pc, #196]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	061b      	lsls	r3, r3, #24
 8000ea4:	492d      	ldr	r1, [pc, #180]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	604b      	str	r3, [r1, #4]
 8000eaa:	e01a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eac:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000eb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fbd4 	bl	8000664 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fbd0 	bl	8000664 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e20e      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ed2:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f0      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x1e0>
 8000ede:	e000      	b.n	8000ee2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ee0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d041      	beq.n	8000f72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d01c      	beq.n	8000f30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef6:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000efc:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f06:	f7ff fbad 	bl	8000664 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fba9 	bl	8000664 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e1e7      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0ef      	beq.n	8000f0e <HAL_RCC_OscConfig+0x22e>
 8000f2e:	e020      	b.n	8000f72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f36:	4a09      	ldr	r2, [pc, #36]	@ (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f40:	f7ff fb90 	bl	8000664 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f46:	e00d      	b.n	8000f64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff fb8c 	bl	8000664 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d906      	bls.n	8000f64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e1ca      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f64:	4b8c      	ldr	r3, [pc, #560]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8000f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1ea      	bne.n	8000f48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80a6 	beq.w	80010cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f84:	4b84      	ldr	r3, [pc, #528]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8000f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2b4>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <HAL_RCC_OscConfig+0x2b6>
 8000f94:	2300      	movs	r3, #0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00d      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fb6:	4b79      	ldr	r3, [pc, #484]	@ (800119c <HAL_RCC_OscConfig+0x4bc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d118      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fc2:	4b76      	ldr	r3, [pc, #472]	@ (800119c <HAL_RCC_OscConfig+0x4bc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a75      	ldr	r2, [pc, #468]	@ (800119c <HAL_RCC_OscConfig+0x4bc>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fb49 	bl	8000664 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd6:	f7ff fb45 	bl	8000664 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e183      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800119c <HAL_RCC_OscConfig+0x4bc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d108      	bne.n	800100e <HAL_RCC_OscConfig+0x32e>
 8000ffc:	4b66      	ldr	r3, [pc, #408]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8000ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001002:	4a65      	ldr	r2, [pc, #404]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800100c:	e024      	b.n	8001058 <HAL_RCC_OscConfig+0x378>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d110      	bne.n	8001038 <HAL_RCC_OscConfig+0x358>
 8001016:	4b60      	ldr	r3, [pc, #384]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800101c:	4a5e      	ldr	r2, [pc, #376]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001026:	4b5c      	ldr	r3, [pc, #368]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800102c:	4a5a      	ldr	r2, [pc, #360]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001036:	e00f      	b.n	8001058 <HAL_RCC_OscConfig+0x378>
 8001038:	4b57      	ldr	r3, [pc, #348]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 800103a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800103e:	4a56      	ldr	r2, [pc, #344]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001048:	4b53      	ldr	r3, [pc, #332]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 800104a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800104e:	4a52      	ldr	r2, [pc, #328]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001060:	f7ff fb00 	bl	8000664 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001066:	e00a      	b.n	800107e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001068:	f7ff fafc 	bl	8000664 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001076:	4293      	cmp	r3, r2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e138      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800107e:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0ed      	beq.n	8001068 <HAL_RCC_OscConfig+0x388>
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108e:	f7ff fae9 	bl	8000664 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fae5 	bl	8000664 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e121      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 80010ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1ed      	bne.n	8001096 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010ba:	7ffb      	ldrb	r3, [r7, #31]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d105      	bne.n	80010cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c0:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c4:	4a34      	ldr	r2, [pc, #208]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 80010c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d03c      	beq.n	8001152 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d01c      	beq.n	800111a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 80010e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80010e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f0:	f7ff fab8 	bl	8000664 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010f8:	f7ff fab4 	bl	8000664 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e0f2      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 800110c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0ef      	beq.n	80010f8 <HAL_RCC_OscConfig+0x418>
 8001118:	e01b      	b.n	8001152 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 800111c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001120:	4a1d      	ldr	r2, [pc, #116]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800112a:	f7ff fa9b 	bl	8000664 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001132:	f7ff fa97 	bl	8000664 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e0d5      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1ef      	bne.n	8001132 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 80c9 	beq.w	80012ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	2b0c      	cmp	r3, #12
 8001166:	f000 8083 	beq.w	8001270 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d15e      	bne.n	8001230 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_RCC_OscConfig+0x4b8>)
 8001178:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800117c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117e:	f7ff fa71 	bl	8000664 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001184:	e00c      	b.n	80011a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff fa6d 	bl	8000664 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d905      	bls.n	80011a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e0ab      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011a0:	4b55      	ldr	r3, [pc, #340]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1ec      	bne.n	8001186 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ac:	4b52      	ldr	r3, [pc, #328]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	4b52      	ldr	r3, [pc, #328]	@ (80012fc <HAL_RCC_OscConfig+0x61c>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6a11      	ldr	r1, [r2, #32]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80011bc:	3a01      	subs	r2, #1
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	4311      	orrs	r1, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80011c6:	0212      	lsls	r2, r2, #8
 80011c8:	4311      	orrs	r1, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80011ce:	0852      	lsrs	r2, r2, #1
 80011d0:	3a01      	subs	r2, #1
 80011d2:	0552      	lsls	r2, r2, #21
 80011d4:	4311      	orrs	r1, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80011da:	0852      	lsrs	r2, r2, #1
 80011dc:	3a01      	subs	r2, #1
 80011de:	0652      	lsls	r2, r2, #25
 80011e0:	4311      	orrs	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011e6:	06d2      	lsls	r2, r2, #27
 80011e8:	430a      	orrs	r2, r1
 80011ea:	4943      	ldr	r1, [pc, #268]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f0:	4b41      	ldr	r3, [pc, #260]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a40      	ldr	r2, [pc, #256]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 80011f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011fc:	4b3e      	ldr	r3, [pc, #248]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	4a3d      	ldr	r2, [pc, #244]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 8001202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001206:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fa2c 	bl	8000664 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001210:	f7ff fa28 	bl	8000664 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e066      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001222:	4b35      	ldr	r3, [pc, #212]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0x530>
 800122e:	e05e      	b.n	80012ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001230:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a30      	ldr	r2, [pc, #192]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 8001236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800123a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fa12 	bl	8000664 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001244:	f7ff fa0e 	bl	8000664 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e04c      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001256:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001262:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	4924      	ldr	r1, [pc, #144]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 8001268:	4b25      	ldr	r3, [pc, #148]	@ (8001300 <HAL_RCC_OscConfig+0x620>)
 800126a:	4013      	ands	r3, r2
 800126c:	60cb      	str	r3, [r1, #12]
 800126e:	e03e      	b.n	80012ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e039      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800127c:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <HAL_RCC_OscConfig+0x618>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	429a      	cmp	r2, r3
 800128e:	d12c      	bne.n	80012ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129a:	3b01      	subs	r3, #1
 800129c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d123      	bne.n	80012ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d11b      	bne.n	80012ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012be:	429a      	cmp	r2, r3
 80012c0:	d113      	bne.n	80012ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	085b      	lsrs	r3, r3, #1
 80012ce:	3b01      	subs	r3, #1
 80012d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	3b01      	subs	r3, #1
 80012e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	019f800c 	.word	0x019f800c
 8001300:	feeefffc 	.word	0xfeeefffc

08001304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e11e      	b.n	800155a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800131c:	4b91      	ldr	r3, [pc, #580]	@ (8001564 <HAL_RCC_ClockConfig+0x260>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d910      	bls.n	800134c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132a:	4b8e      	ldr	r3, [pc, #568]	@ (8001564 <HAL_RCC_ClockConfig+0x260>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 020f 	bic.w	r2, r3, #15
 8001332:	498c      	ldr	r1, [pc, #560]	@ (8001564 <HAL_RCC_ClockConfig+0x260>)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800133a:	4b8a      	ldr	r3, [pc, #552]	@ (8001564 <HAL_RCC_ClockConfig+0x260>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e106      	b.n	800155a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d073      	beq.n	8001440 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d129      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001360:	4b81      	ldr	r3, [pc, #516]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0f4      	b.n	800155a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001370:	f000 f966 	bl	8001640 <RCC_GetSysClockFreqFromPLLSource>
 8001374:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4a7c      	ldr	r2, [pc, #496]	@ (800156c <HAL_RCC_ClockConfig+0x268>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d93f      	bls.n	80013fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800137e:	4b7a      	ldr	r3, [pc, #488]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001392:	2b00      	cmp	r3, #0
 8001394:	d033      	beq.n	80013fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800139a:	2b00      	cmp	r3, #0
 800139c:	d12f      	bne.n	80013fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800139e:	4b72      	ldr	r3, [pc, #456]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013a6:	4a70      	ldr	r2, [pc, #448]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e024      	b.n	80013fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d107      	bne.n	80013cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0c6      	b.n	800155a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013cc:	4b66      	ldr	r3, [pc, #408]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0be      	b.n	800155a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80013dc:	f000 f8ce 	bl	800157c <HAL_RCC_GetSysClockFreq>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4a61      	ldr	r2, [pc, #388]	@ (800156c <HAL_RCC_ClockConfig+0x268>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d909      	bls.n	80013fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 80013f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4957      	ldr	r1, [pc, #348]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001410:	f7ff f928 	bl	8000664 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff f924 	bl	8000664 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e095      	b.n	800155a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b4e      	ldr	r3, [pc, #312]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d023      	beq.n	8001494 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001458:	4b43      	ldr	r3, [pc, #268]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a42      	ldr	r2, [pc, #264]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800145e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001462:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001470:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001478:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800147a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800147e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4b39      	ldr	r3, [pc, #228]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4936      	ldr	r1, [pc, #216]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
 8001492:	e008      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b80      	cmp	r3, #128	@ 0x80
 8001498:	d105      	bne.n	80014a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800149a:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	4a32      	ldr	r2, [pc, #200]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 80014a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <HAL_RCC_ClockConfig+0x260>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d21d      	bcs.n	80014f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <HAL_RCC_ClockConfig+0x260>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 020f 	bic.w	r2, r3, #15
 80014bc:	4929      	ldr	r1, [pc, #164]	@ (8001564 <HAL_RCC_ClockConfig+0x260>)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014c4:	f7ff f8ce 	bl	8000664 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff f8ca 	bl	8000664 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e03b      	b.n	800155a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_RCC_ClockConfig+0x260>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1ed      	bne.n	80014cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4917      	ldr	r1, [pc, #92]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	490f      	ldr	r1, [pc, #60]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800152e:	f000 f825 	bl	800157c <HAL_RCC_GetSysClockFreq>
 8001532:	4602      	mov	r2, r0
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <HAL_RCC_ClockConfig+0x264>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	490c      	ldr	r1, [pc, #48]	@ (8001570 <HAL_RCC_ClockConfig+0x26c>)
 8001540:	5ccb      	ldrb	r3, [r1, r3]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_RCC_ClockConfig+0x270>)
 800154c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_RCC_ClockConfig+0x274>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f83a 	bl	80005cc <HAL_InitTick>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40022000 	.word	0x40022000
 8001568:	40021000 	.word	0x40021000
 800156c:	04c4b400 	.word	0x04c4b400
 8001570:	0800223c 	.word	0x0800223c
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001582:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d102      	bne.n	8001594 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800158e:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	e047      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015a0:	4b26      	ldr	r3, [pc, #152]	@ (800163c <HAL_RCC_GetSysClockFreq+0xc0>)
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	e03e      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015a6:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d136      	bne.n	8001620 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3301      	adds	r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015d0:	4a1a      	ldr	r2, [pc, #104]	@ (800163c <HAL_RCC_GetSysClockFreq+0xc0>)
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d8:	4a16      	ldr	r2, [pc, #88]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015da:	68d2      	ldr	r2, [r2, #12]
 80015dc:	0a12      	lsrs	r2, r2, #8
 80015de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
      break;
 80015e8:	e00c      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015ea:	4a13      	ldr	r2, [pc, #76]	@ (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f4:	68d2      	ldr	r2, [r2, #12]
 80015f6:	0a12      	lsrs	r2, r2, #8
 80015f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	617b      	str	r3, [r7, #20]
      break;
 8001602:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0e5b      	lsrs	r3, r3, #25
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	3301      	adds	r3, #1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	e001      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001624:	693b      	ldr	r3, [r7, #16]
}
 8001626:	4618      	mov	r0, r3
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	00f42400 	.word	0x00f42400
 800163c:	016e3600 	.word	0x016e3600

08001640 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001646:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d10c      	bne.n	800167e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001664:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800166e:	68d2      	ldr	r2, [r2, #12]
 8001670:	0a12      	lsrs	r2, r2, #8
 8001672:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
    break;
 800167c:	e00c      	b.n	8001698 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001688:	68d2      	ldr	r2, [r2, #12]
 800168a:	0a12      	lsrs	r2, r2, #8
 800168c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	617b      	str	r3, [r7, #20]
    break;
 8001696:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0e5b      	lsrs	r3, r3, #25
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	3301      	adds	r3, #1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80016b2:	687b      	ldr	r3, [r7, #4]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000
 80016c4:	016e3600 	.word	0x016e3600
 80016c8:	00f42400 	.word	0x00f42400

080016cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e049      	b.n	8001772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe fea6 	bl	8000444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3304      	adds	r3, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f000 f94a 	bl	80019a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001796:	2302      	movs	r3, #2
 8001798:	e0ff      	b.n	800199a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b14      	cmp	r3, #20
 80017a6:	f200 80f0 	bhi.w	800198a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80017aa:	a201      	add	r2, pc, #4	@ (adr r2, 80017b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	08001805 	.word	0x08001805
 80017b4:	0800198b 	.word	0x0800198b
 80017b8:	0800198b 	.word	0x0800198b
 80017bc:	0800198b 	.word	0x0800198b
 80017c0:	08001845 	.word	0x08001845
 80017c4:	0800198b 	.word	0x0800198b
 80017c8:	0800198b 	.word	0x0800198b
 80017cc:	0800198b 	.word	0x0800198b
 80017d0:	08001887 	.word	0x08001887
 80017d4:	0800198b 	.word	0x0800198b
 80017d8:	0800198b 	.word	0x0800198b
 80017dc:	0800198b 	.word	0x0800198b
 80017e0:	080018c7 	.word	0x080018c7
 80017e4:	0800198b 	.word	0x0800198b
 80017e8:	0800198b 	.word	0x0800198b
 80017ec:	0800198b 	.word	0x0800198b
 80017f0:	08001909 	.word	0x08001909
 80017f4:	0800198b 	.word	0x0800198b
 80017f8:	0800198b 	.word	0x0800198b
 80017fc:	0800198b 	.word	0x0800198b
 8001800:	08001949 	.word	0x08001949
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f966 	bl	8001adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0208 	orr.w	r2, r2, #8
 800181e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0204 	bic.w	r2, r2, #4
 800182e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6999      	ldr	r1, [r3, #24]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	619a      	str	r2, [r3, #24]
      break;
 8001842:	e0a5      	b.n	8001990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f9d6 	bl	8001bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800185e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800186e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6999      	ldr	r1, [r3, #24]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	021a      	lsls	r2, r3, #8
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	619a      	str	r2, [r3, #24]
      break;
 8001884:	e084      	b.n	8001990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fa3f 	bl	8001d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0208 	orr.w	r2, r2, #8
 80018a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69da      	ldr	r2, [r3, #28]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0204 	bic.w	r2, r2, #4
 80018b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69d9      	ldr	r1, [r3, #28]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	61da      	str	r2, [r3, #28]
      break;
 80018c4:	e064      	b.n	8001990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 faa7 	bl	8001e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69d9      	ldr	r1, [r3, #28]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	021a      	lsls	r2, r3, #8
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	61da      	str	r2, [r3, #28]
      break;
 8001906:	e043      	b.n	8001990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fb10 	bl	8001f34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0208 	orr.w	r2, r2, #8
 8001922:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0204 	bic.w	r2, r2, #4
 8001932:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001946:	e023      	b.n	8001990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fb54 	bl	8001ffc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001962:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001972:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	021a      	lsls	r2, r3, #8
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001988:	e002      	b.n	8001990 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
      break;
 800198e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001998:	7dfb      	ldrb	r3, [r7, #23]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop

080019a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a42      	ldr	r2, [pc, #264]	@ (8001ac0 <TIM_Base_SetConfig+0x11c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00f      	beq.n	80019dc <TIM_Base_SetConfig+0x38>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c2:	d00b      	beq.n	80019dc <TIM_Base_SetConfig+0x38>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac4 <TIM_Base_SetConfig+0x120>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <TIM_Base_SetConfig+0x38>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3e      	ldr	r2, [pc, #248]	@ (8001ac8 <TIM_Base_SetConfig+0x124>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d003      	beq.n	80019dc <TIM_Base_SetConfig+0x38>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3d      	ldr	r2, [pc, #244]	@ (8001acc <TIM_Base_SetConfig+0x128>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d108      	bne.n	80019ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a33      	ldr	r2, [pc, #204]	@ (8001ac0 <TIM_Base_SetConfig+0x11c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01b      	beq.n	8001a2e <TIM_Base_SetConfig+0x8a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019fc:	d017      	beq.n	8001a2e <TIM_Base_SetConfig+0x8a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a30      	ldr	r2, [pc, #192]	@ (8001ac4 <TIM_Base_SetConfig+0x120>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <TIM_Base_SetConfig+0x8a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac8 <TIM_Base_SetConfig+0x124>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00f      	beq.n	8001a2e <TIM_Base_SetConfig+0x8a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a2e      	ldr	r2, [pc, #184]	@ (8001acc <TIM_Base_SetConfig+0x128>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00b      	beq.n	8001a2e <TIM_Base_SetConfig+0x8a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad0 <TIM_Base_SetConfig+0x12c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <TIM_Base_SetConfig+0x8a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad4 <TIM_Base_SetConfig+0x130>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d003      	beq.n	8001a2e <TIM_Base_SetConfig+0x8a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad8 <TIM_Base_SetConfig+0x134>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a16      	ldr	r2, [pc, #88]	@ (8001ac0 <TIM_Base_SetConfig+0x11c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00f      	beq.n	8001a8c <TIM_Base_SetConfig+0xe8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <TIM_Base_SetConfig+0x128>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00b      	beq.n	8001a8c <TIM_Base_SetConfig+0xe8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a16      	ldr	r2, [pc, #88]	@ (8001ad0 <TIM_Base_SetConfig+0x12c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <TIM_Base_SetConfig+0xe8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ad4 <TIM_Base_SetConfig+0x130>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d003      	beq.n	8001a8c <TIM_Base_SetConfig+0xe8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <TIM_Base_SetConfig+0x134>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d103      	bne.n	8001a94 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d105      	bne.n	8001ab2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f023 0201 	bic.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40000400 	.word	0x40000400
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40013400 	.word	0x40013400
 8001ad0:	40014000 	.word	0x40014000
 8001ad4:	40014400 	.word	0x40014400
 8001ad8:	40014800 	.word	0x40014800

08001adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f023 0201 	bic.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f023 0302 	bic.w	r3, r3, #2
 8001b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a2c      	ldr	r2, [pc, #176]	@ (8001be8 <TIM_OC1_SetConfig+0x10c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00f      	beq.n	8001b5c <TIM_OC1_SetConfig+0x80>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bec <TIM_OC1_SetConfig+0x110>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00b      	beq.n	8001b5c <TIM_OC1_SetConfig+0x80>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a2a      	ldr	r2, [pc, #168]	@ (8001bf0 <TIM_OC1_SetConfig+0x114>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <TIM_OC1_SetConfig+0x80>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a29      	ldr	r2, [pc, #164]	@ (8001bf4 <TIM_OC1_SetConfig+0x118>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d003      	beq.n	8001b5c <TIM_OC1_SetConfig+0x80>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a28      	ldr	r2, [pc, #160]	@ (8001bf8 <TIM_OC1_SetConfig+0x11c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d10c      	bne.n	8001b76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f023 0308 	bic.w	r3, r3, #8
 8001b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a1b      	ldr	r2, [pc, #108]	@ (8001be8 <TIM_OC1_SetConfig+0x10c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00f      	beq.n	8001b9e <TIM_OC1_SetConfig+0xc2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1a      	ldr	r2, [pc, #104]	@ (8001bec <TIM_OC1_SetConfig+0x110>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00b      	beq.n	8001b9e <TIM_OC1_SetConfig+0xc2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <TIM_OC1_SetConfig+0x114>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <TIM_OC1_SetConfig+0xc2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a18      	ldr	r2, [pc, #96]	@ (8001bf4 <TIM_OC1_SetConfig+0x118>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d003      	beq.n	8001b9e <TIM_OC1_SetConfig+0xc2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <TIM_OC1_SetConfig+0x11c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d111      	bne.n	8001bc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	621a      	str	r2, [r3, #32]
}
 8001bdc:	bf00      	nop
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40013400 	.word	0x40013400
 8001bf0:	40014000 	.word	0x40014000
 8001bf4:	40014400 	.word	0x40014400
 8001bf8:	40014800 	.word	0x40014800

08001bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f023 0210 	bic.w	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f023 0320 	bic.w	r3, r3, #32
 8001c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <TIM_OC2_SetConfig+0x100>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d003      	beq.n	8001c68 <TIM_OC2_SetConfig+0x6c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a27      	ldr	r2, [pc, #156]	@ (8001d00 <TIM_OC2_SetConfig+0x104>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d10d      	bne.n	8001c84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a1d      	ldr	r2, [pc, #116]	@ (8001cfc <TIM_OC2_SetConfig+0x100>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00f      	beq.n	8001cac <TIM_OC2_SetConfig+0xb0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <TIM_OC2_SetConfig+0x104>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00b      	beq.n	8001cac <TIM_OC2_SetConfig+0xb0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <TIM_OC2_SetConfig+0x108>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <TIM_OC2_SetConfig+0xb0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001d08 <TIM_OC2_SetConfig+0x10c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d003      	beq.n	8001cac <TIM_OC2_SetConfig+0xb0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <TIM_OC2_SetConfig+0x110>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d113      	bne.n	8001cd4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	621a      	str	r2, [r3, #32]
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40012c00 	.word	0x40012c00
 8001d00:	40013400 	.word	0x40013400
 8001d04:	40014000 	.word	0x40014000
 8001d08:	40014400 	.word	0x40014400
 8001d0c:	40014800 	.word	0x40014800

08001d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <TIM_OC3_SetConfig+0xfc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <TIM_OC3_SetConfig+0x6a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <TIM_OC3_SetConfig+0x100>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10d      	bne.n	8001d96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <TIM_OC3_SetConfig+0xfc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00f      	beq.n	8001dbe <TIM_OC3_SetConfig+0xae>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <TIM_OC3_SetConfig+0x100>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00b      	beq.n	8001dbe <TIM_OC3_SetConfig+0xae>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e14 <TIM_OC3_SetConfig+0x104>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <TIM_OC3_SetConfig+0xae>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <TIM_OC3_SetConfig+0x108>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d003      	beq.n	8001dbe <TIM_OC3_SetConfig+0xae>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a18      	ldr	r2, [pc, #96]	@ (8001e1c <TIM_OC3_SetConfig+0x10c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d113      	bne.n	8001de6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	621a      	str	r2, [r3, #32]
}
 8001e00:	bf00      	nop
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40012c00 	.word	0x40012c00
 8001e10:	40013400 	.word	0x40013400
 8001e14:	40014000 	.word	0x40014000
 8001e18:	40014400 	.word	0x40014400
 8001e1c:	40014800 	.word	0x40014800

08001e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	031b      	lsls	r3, r3, #12
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a28      	ldr	r2, [pc, #160]	@ (8001f20 <TIM_OC4_SetConfig+0x100>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d003      	beq.n	8001e8c <TIM_OC4_SetConfig+0x6c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a27      	ldr	r2, [pc, #156]	@ (8001f24 <TIM_OC4_SetConfig+0x104>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10d      	bne.n	8001ea8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	031b      	lsls	r3, r3, #12
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <TIM_OC4_SetConfig+0x100>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00f      	beq.n	8001ed0 <TIM_OC4_SetConfig+0xb0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <TIM_OC4_SetConfig+0x104>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00b      	beq.n	8001ed0 <TIM_OC4_SetConfig+0xb0>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <TIM_OC4_SetConfig+0x108>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <TIM_OC4_SetConfig+0xb0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f2c <TIM_OC4_SetConfig+0x10c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_OC4_SetConfig+0xb0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a19      	ldr	r2, [pc, #100]	@ (8001f30 <TIM_OC4_SetConfig+0x110>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d113      	bne.n	8001ef8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ed6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ede:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	019b      	lsls	r3, r3, #6
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	019b      	lsls	r3, r3, #6
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	621a      	str	r2, [r3, #32]
}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40013400 	.word	0x40013400
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	40014400 	.word	0x40014400
 8001f30:	40014800 	.word	0x40014800

08001f34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001f78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <TIM_OC5_SetConfig+0xb4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00f      	beq.n	8001fae <TIM_OC5_SetConfig+0x7a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <TIM_OC5_SetConfig+0xb8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00b      	beq.n	8001fae <TIM_OC5_SetConfig+0x7a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a15      	ldr	r2, [pc, #84]	@ (8001ff0 <TIM_OC5_SetConfig+0xbc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <TIM_OC5_SetConfig+0x7a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <TIM_OC5_SetConfig+0xc0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d003      	beq.n	8001fae <TIM_OC5_SetConfig+0x7a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a13      	ldr	r2, [pc, #76]	@ (8001ff8 <TIM_OC5_SetConfig+0xc4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d109      	bne.n	8001fc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	621a      	str	r2, [r3, #32]
}
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012c00 	.word	0x40012c00
 8001fec:	40013400 	.word	0x40013400
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	40014800 	.word	0x40014800

08001ffc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800202a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800202e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	051b      	lsls	r3, r3, #20
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <TIM_OC6_SetConfig+0xb8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00f      	beq.n	8002078 <TIM_OC6_SetConfig+0x7c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a17      	ldr	r2, [pc, #92]	@ (80020b8 <TIM_OC6_SetConfig+0xbc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00b      	beq.n	8002078 <TIM_OC6_SetConfig+0x7c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a16      	ldr	r2, [pc, #88]	@ (80020bc <TIM_OC6_SetConfig+0xc0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <TIM_OC6_SetConfig+0x7c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a15      	ldr	r2, [pc, #84]	@ (80020c0 <TIM_OC6_SetConfig+0xc4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_OC6_SetConfig+0x7c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <TIM_OC6_SetConfig+0xc8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d109      	bne.n	800208c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	029b      	lsls	r3, r3, #10
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	621a      	str	r2, [r3, #32]
}
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	40013400 	.word	0x40013400
 80020bc:	40014000 	.word	0x40014000
 80020c0:	40014400 	.word	0x40014400
 80020c4:	40014800 	.word	0x40014800

080020c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020dc:	2302      	movs	r3, #2
 80020de:	e065      	b.n	80021ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2c      	ldr	r2, [pc, #176]	@ (80021b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2b      	ldr	r2, [pc, #172]	@ (80021bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d108      	bne.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800211a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800212c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002130:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d018      	beq.n	8002180 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002156:	d013      	beq.n	8002180 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a18      	ldr	r2, [pc, #96]	@ (80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a17      	ldr	r2, [pc, #92]	@ (80021c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a13      	ldr	r2, [pc, #76]	@ (80021c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d10c      	bne.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4313      	orrs	r3, r2
 8002190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40013400 	.word	0x40013400
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800
 80021c8:	40014000 	.word	0x40014000

080021cc <memset>:
 80021cc:	4402      	add	r2, r0
 80021ce:	4603      	mov	r3, r0
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d100      	bne.n	80021d6 <memset+0xa>
 80021d4:	4770      	bx	lr
 80021d6:	f803 1b01 	strb.w	r1, [r3], #1
 80021da:	e7f9      	b.n	80021d0 <memset+0x4>

080021dc <__libc_init_array>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	4d0d      	ldr	r5, [pc, #52]	@ (8002214 <__libc_init_array+0x38>)
 80021e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002218 <__libc_init_array+0x3c>)
 80021e2:	1b64      	subs	r4, r4, r5
 80021e4:	10a4      	asrs	r4, r4, #2
 80021e6:	2600      	movs	r6, #0
 80021e8:	42a6      	cmp	r6, r4
 80021ea:	d109      	bne.n	8002200 <__libc_init_array+0x24>
 80021ec:	4d0b      	ldr	r5, [pc, #44]	@ (800221c <__libc_init_array+0x40>)
 80021ee:	4c0c      	ldr	r4, [pc, #48]	@ (8002220 <__libc_init_array+0x44>)
 80021f0:	f000 f818 	bl	8002224 <_init>
 80021f4:	1b64      	subs	r4, r4, r5
 80021f6:	10a4      	asrs	r4, r4, #2
 80021f8:	2600      	movs	r6, #0
 80021fa:	42a6      	cmp	r6, r4
 80021fc:	d105      	bne.n	800220a <__libc_init_array+0x2e>
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
 8002200:	f855 3b04 	ldr.w	r3, [r5], #4
 8002204:	4798      	blx	r3
 8002206:	3601      	adds	r6, #1
 8002208:	e7ee      	b.n	80021e8 <__libc_init_array+0xc>
 800220a:	f855 3b04 	ldr.w	r3, [r5], #4
 800220e:	4798      	blx	r3
 8002210:	3601      	adds	r6, #1
 8002212:	e7f2      	b.n	80021fa <__libc_init_array+0x1e>
 8002214:	0800224c 	.word	0x0800224c
 8002218:	0800224c 	.word	0x0800224c
 800221c:	0800224c 	.word	0x0800224c
 8002220:	08002250 	.word	0x08002250

08002224 <_init>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr

08002230 <_fini>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	bf00      	nop
 8002234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002236:	bc08      	pop	{r3}
 8002238:	469e      	mov	lr, r3
 800223a:	4770      	bx	lr
