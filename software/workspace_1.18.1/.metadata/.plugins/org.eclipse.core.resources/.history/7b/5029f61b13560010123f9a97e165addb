/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

/* USER CODE BEGIN PV */

uint16_t Time_Delay1;
int Time_Delay2;
int D_Time;
int T_Fact=3; // MS/Step for PISS delay
int W_Time=600; // MS Wait time for shot delays and other timings


int Temp_Sensor1;
int Temp_Sensor2;

int Trigger1=10;
int Trigger2=19;

int SCR_STATUS;

// Buss Bar Sensor ( Future )
float MAX_TEMP = 38.0; // F 102.2 Shutdowm point in C.
float COOL_TEMP = 34.0; // F 96.8 Min Temp to Re-enable Circuit

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint16_t analogRead(uint32_t channel);
void Std_Mag();
void AutoMag();
void Mag_Shot();
void Demag();
void Water_On();
void Water_Off();
void Clamp();
void UnClamp();
void Piss();
void Temp_Check();
void SCR_ON();
void SCR_OFF();
void PGM_MODE();
void MAG_SETUP();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
//  HAL_Delay(100);
  SCR_OFF();  // Make sure that we assume that it is overheated at power up!
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Time_Delay1 = analogRead(6);
	    D_Time=(Time_Delay1*T_Fact);

	    Temp_Check();
	    if(SCR_STATUS!=0){
	      if((HAL_GPIO_ReadPin(Mag_In_GPIO_Port, Mag_In_Pin) == GPIO_PIN_RESET)&&(Time_Delay1>0)){
	        AutoMag(); // Magnatize
	      }
	      if((HAL_GPIO_ReadPin(Demag_In_GPIO_Port, Demag_In_Pin) == GPIO_PIN_RESET)&&(Time_Delay1>0)){
	        Demag(); // De-Magnatize
	      }
	      if((HAL_GPIO_ReadPin(Mag_In_GPIO_Port, Mag_In_Pin) == GPIO_PIN_RESET)&&(Time_Delay1==0)){
	        Std_Mag(); // Magnatize
	      }

	    }
	    if(HAL_GPIO_ReadPin(AC1_Over_Heat_LED_GPIO_Port, AC1_Over_Heat_LED_Pin) == GPIO_PIN_SET){
	      PGM_MODE();
	    }
	    if((SCR_STATUS==0)){
	    	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET); // Green LED off
	    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // Red LED on
	    }
	    if((SCR_STATUS==1)){
	    	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET); // Green LED On
	    	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET); // Red LED Off
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Sig_Oiler_Pin|Sig_Solenoid2_Pin|Sig_Solenoid1_Pin|Sig_Clamp_Pin
                          |Machine_LED_Pin|Mag_Mosfet_Pin|Demag_Mosfet_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : AC1_Over_Heat_LED_Pin */
  GPIO_InitStruct.Pin = AC1_Over_Heat_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(AC1_Over_Heat_LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Sig_Oiler_Pin Sig_Solenoid2_Pin Sig_Solenoid1_Pin Sig_Clamp_Pin
                           Machine_LED_Pin Mag_Mosfet_Pin Demag_Mosfet_Pin */
  GPIO_InitStruct.Pin = Sig_Oiler_Pin|Sig_Solenoid2_Pin|Sig_Solenoid1_Pin|Sig_Clamp_Pin
                          |Machine_LED_Pin|Mag_Mosfet_Pin|Demag_Mosfet_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : Mag_In_Pin Demag_In_Pin */
  GPIO_InitStruct.Pin = Mag_In_Pin|Demag_In_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
uint16_t analogRead(uint32_t channel) {

	ADC_ChannelConfTypeDef sConfig = {0};
	if (channel == 6)
		sConfig.Channel = ADC_CHANNEL_6;
	else if (channel == 8)
		sConfig.Channel = ADC_CHANNEL_8;
	else if (channel == 9)
		sConfig.Channel = ADC_CHANNEL_9;
	else
		Error_Handler();

	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	{
	Error_Handler();
	}
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 10);
	uint16_t val = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	return val/4*3.3/5; // 4096->1024 and 5V to 3.3V conversion. legacy to new board
}
void Std_Mag()
{
 Clamp();
 HAL_Delay(1000);
 Mag_Shot();
 HAL_Delay(600);
 Mag_Shot();
 HAL_Delay(600);
 UnClamp();
}

void AutoMag()
{
  Clamp();
  HAL_Delay(W_Time); // Delay to get hand out of the way.
  Mag_Shot();
  HAL_Delay(W_Time); // Delay to prevent arcing.
  Water_On();
  HAL_Delay(500);
  Piss();
  Water_Off();
  Mag_Shot();
  HAL_Delay(W_Time);
  Mag_Shot();
  HAL_Delay(W_Time);
  HAL_Delay(W_Time);
  UnClamp();

}

#define Mag_Mosfet_Pin GPIO_PIN_5
#define Mag_Mosfet_GPIO_Port GPIOA
void Mag_Shot()
{
	HAL_GPIO_WritePin(Mag_Mosfet_GPIO_Port, Mag_Mosfet_Pin, GPIO_PIN_SET); // Mag Shot
	HAL_Delay(100); // Delay Time
	HAL_GPIO_WritePin(Mag_Mosfet_GPIO_Port, Mag_Mosfet_Pin, GPIO_PIN_RESET); // Mag Shot
}

void Demag()
{
   Clamp();
  HAL_Delay(1000);
  HAL_GPIO_WritePin(Demag_Mosfet_GPIO_Port, Demag_Mosfet_Pin, GPIO_PIN_SET); // DE-Mag Shot
  HAL_Delay(100); // Delay Time
  HAL_GPIO_WritePin(Mag_Mosfet_GPIO_Port, Mag_Mosfet_Pin, GPIO_PIN_RESET); // De-Mag Shot
  HAL_Delay(25000);
  UnClamp();
}

void Water_On()
{
	HAL_GPIO_WritePin(Sig_Solenoid1_GPIO_Port, Sig_Solenoid1_Pin, GPIO_PIN_RESET); // Water Solenoid 1
	HAL_GPIO_WritePin(Sig_Solenoid2_GPIO_Port, Sig_Solenoid2_Pin, GPIO_PIN_SET); // Water Solenoid 2
}

void Water_Off()
{
	HAL_GPIO_WritePin(Sig_Solenoid1_GPIO_Port, Sig_Solenoid1_Pin, GPIO_PIN_SET); // Water Solenoid 1
  HAL_GPIO_WritePin(Sig_Solenoid2_GPIO_Port, Sig_Solenoid2_Pin, GPIO_PIN_RESET); // Water Solenoid 2
}

void Clamp()
{
	HAL_GPIO_WritePin(Sig_Clamp_GPIO_Port, Sig_Clamp_Pin, GPIO_PIN_SET); // Clamp Head

}

void UnClamp()
{
	HAL_GPIO_WritePin(Sig_Clamp_GPIO_Port, Sig_Clamp_Pin, GPIO_PIN_RESET); // Clamp Head
}

void Piss()
{

	HAL_GPIO_WritePin(Sig_Oiler_GPIO_Port, Sig_Oiler_Pin, GPIO_PIN_SET); // Oiler On
	HAL_Delay(D_Time); // Delay Time
	HAL_GPIO_WritePin(Sig_Oiler_GPIO_Port, Sig_Oiler_Pin, GPIO_PIN_RESET);
}

void Temp_Check()
{
  Temp_Sensor1 = (analogRead(8)* 0.48828125);
  Temp_Sensor2 = (analogRead(9)* 0.48828125);
  if((Temp_Sensor1>=MAX_TEMP)||(Temp_Sensor2>=MAX_TEMP)){
    SCR_OFF();
  }
  if((Temp_Sensor1<=COOL_TEMP)&&(Temp_Sensor2<=COOL_TEMP)){
    SCR_ON();
  }
}

void SCR_ON(){
	HAL_GPIO_WritePin(Machine_LED_GPIO_Port, Machine_LED_Pin, GPIO_PIN_RESET);
	SCR_STATUS=1;
}

void SCR_OFF(){
	HAL_GPIO_WritePin(Machine_LED_GPIO_Port, Machine_LED_Pin, GPIO_PIN_SET);
	SCR_STATUS=0;
}

void PGM_MODE()
{
	//PGM Mode On
 while(HAL_GPIO_ReadPin(AC1_Over_Heat_LED_GPIO_Port, AC1_Over_Heat_LED_Pin) == GPIO_PIN_SET){

  Time_Delay1 = analogRead(6);
  D_Time=(Time_Delay1*T_Fact);

  Temp_Check();
  if(SCR_STATUS!=0){
    if((HAL_GPIO_ReadPin(Demag_In_GPIO_Port, Demag_In_Pin) == GPIO_PIN_RESET)&&(Time_Delay1>0)){
      Piss(); // Magnetize
      HAL_Delay(D_Time); // Return Delay Time
    }
    if(HAL_GPIO_ReadPin(Mag_In_GPIO_Port, Mag_In_Pin) == GPIO_PIN_RESET){
      Clamp();
      MAG_SETUP(); // De-Magnatize
      UnClamp();
    }
   }
 }
}

void MAG_SETUP()
{
   while(HAL_GPIO_ReadPin(AC1_Over_Heat_LED_GPIO_Port, AC1_Over_Heat_LED_Pin) == GPIO_PIN_SET){
     if(HAL_GPIO_ReadPin(Demag_In_GPIO_Port, Demag_In_Pin) == GPIO_PIN_RESET){
       break;
     }
     if(HAL_GPIO_ReadPin(Mag_In_GPIO_Port, Mag_In_Pin) == GPIO_PIN_RESET){
       Temp_Check();
       if(SCR_STATUS!=0){
         Mag_Shot();
       }
     }
   }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
